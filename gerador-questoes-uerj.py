import plotly.graph_objects as go
import streamlit as st
import pandas as pd
import numpy as np
import anthropic
import json
import streamlit.components.v1 as components
import os
from streamlit_option_menu import option_menu
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
import io
import requests
from io import BytesIO
import urllib.request
from soccerplots.radar_chart import Radar
import matplotlib.colors as mcolors
from scipy.stats import pearsonr
import base64
import matplotlib.patheffects as path_effects
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader


# Configure page at the very beginning
st.set_page_config(
    page_title="Gerador de Quest√µes Discursivas UERJ",
    page_icon="üéì",  # Generic icon for both subjects
    layout="wide"
)

# Authentication function
def check_password():
    """Returns `True` if the user had the correct password."""
    
    def password_entered():
        """Checks whether a password entered by the user is correct."""
        
        try:
            users = st.secrets["auth"]        
            if (st.session_state["username"] in users and 
                users[st.session_state["username"]] == st.session_state["password"]):
                st.session_state["password_correct"] = True
                del st.session_state["password"]  # Don't store password
                del st.session_state["username"]  # Don't store username
            else:
                st.session_state["password_correct"] = False

        except Exception as e:
            st.error("Erro na configura√ß√£o de autentica√ß√£o")
            st.session_state["password_correct"] = False
        
    # Return True if password is validated
    if st.session_state.get("password_correct", False):
        return True

    # Show login form
    st.markdown("<h2 style='text-align: center; color: black;'>üîê Login</h2>", unsafe_allow_html=True)
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.text_input("Usu√°rio", key="username")
        st.text_input("Senha", type="password", key="password")
        st.button("Login", on_click=password_entered)
        
        if st.session_state.get("password_correct", None) == False:
            st.error("üòï Usu√°rio ou senha incorretos")
    
    return False

# Check authentication before showing the app
if not check_password():
    st.stop()  # Stop here if not authenticated
    
st.markdown("<h2 style='text-align: center;  color: black;'>Gerador de Quest√µes Discursivas UERJ<br>2024 </b></h2>", unsafe_allow_html=True)
st.markdown("---")

# Plotting Braileir√£o Logo
# GitHub raw URL
image_url = "https://raw.githubusercontent.com/JAmerico1898/gerador-questoes-uerj/a3d7bcda0a18dd8e99e577a0aa41c0a42f979d6b/uerj.png"


st.markdown(
    f"""
    <div style="display: flex; justify-content: center;">
        <img src="{image_url}" width="150">
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("---")

# Define your options
options = [
    "Qu√≠mica", 
    "Biologia"
    ]

# Create a container for the buttons
st.markdown("<h3 style='text-align: center; color: black;'>Selecione uma op√ß√£o:</h3>", unsafe_allow_html=True)

# Initialize session state variables if they don't exist
if 'selected_option' not in st.session_state:
    st.session_state.selected_option = None

# Define button click handlers for each option
def select_option(option):
    st.session_state.selected_option = option

# Define custom CSS for button styling
st.markdown("""
<style>
    /* Default button style (light gray) */
    .stButton > button {
        background-color: #f0f2f6 !important;
        color: #31333F !important;
        border-color: #d2d6dd !important;
        width: 100%;
    }
    
    /* Selected button style (red) */
    .selected-button {
        background-color: #FF4B4B !important;
        color: white !important;
        border-color: #FF0000 !important;
        width: 100%;
        padding: 0.5rem;
        font-weight: 400;
        border-radius: 0.25rem;
        cursor: default;
        text-align: center;
        margin-bottom: 0.75rem;
    }
</style>
""", unsafe_allow_html=True)

# Create two rows of columns for the buttons
col1, col2, col3 = st.columns([3, 1, 3])

# Row 1
with col1:
    if st.session_state.selected_option == options[0]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[0]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[0], key="btn0", use_container_width=True, on_click=select_option, args=(options[0],))

with col3:
    if st.session_state.selected_option == options[1]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[1]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[1], key="btn1", use_container_width=True, on_click=select_option, args=(options[1],))
        
st.write("---")        

if st.session_state.selected_option == "Qu√≠mica":

    # Configura√ß√£o da p√°gina
    #st.set_page_config(
    #    page_title="Gerador de Quest√µes Discursivas UERJ - Qu√≠mica",
    #    page_icon="üß™",
    #    layout="wide"
    #)

    # Fun√ß√£o para inicializar o cliente Anthropic
    @st.cache_resource
    def init_anthropic_client():
        try:
            api_key = st.secrets["ANTHROPIC_API_KEY"]
            return anthropic.Anthropic(api_key=api_key)
        except Exception as e:
            st.error(f"Erro ao inicializar cliente Anthropic: {e}")
            st.error("Verifique se a chave ANTHROPIC_API_KEY est√° configurada nos secrets do Streamlit.")
            return None

    @st.cache_data
    def carregar_contexto_arquivo(topico_id):
        """Carrega o contexto de um arquivo .txt espec√≠fico"""
        # Mapeamento de t√≥pico para nome do arquivo
        mapeamento_arquivos = {
            "1.1.1": "1.1.1 - √Åtomos - part√≠culas subat√¥micas, configura√ß√£o eletr√¥nica.txt",
            "1.2.1": "1.2.1 - Elementos qu√≠micos - massa at√¥mica, n√∫mero at√¥mico, isotopia.txt",
            "1.2.2": "1.2.2 - Elementos qu√≠micos - classifica√ß√£o peri√≥dica e propriedades peri√≥dicas.txt",
            "1.3.1": "1.3.1 - √çons e mol√©culas - liga√ß√µes qu√≠micas.txt",
            "1.3.2": "1.3.2 - √çons e mol√©culas - geometria molecular.txt",
            "1.3.3": "1.3.3 - √çons e mol√©culas - intera√ß√µes intermoleculares.txt",
            "1.4.1": "1.4.1 - Bases moleculares da vida - √°cidos nucleicos; prote√≠nas; lip√≠dios; carboidratos.txt",
            "2.1.1": "2.1.1 - Subst√¢ncia pura e misturas - conceitos, propriedades, classifica√ß√µes; processos de separa√ß√£o de misturas.txt",
            "2.2.1": "2.2.1 - Solu√ß√µes - unidades de concentra√ß√£o expressas em percentagem, em g.L-1 e em quantidade de mat√©ria; dilui√ß√£o e misturas.txt",
            "2.3.1": "2.3.1 - Gases ideais - transforma√ß√µes; equa√ß√£o geral dos gases; misturas gasosas.txt",
            "2.4.1": "2.4.1 - Fun√ß√µes qu√≠micas - classifica√ß√£o e nomenclatura das subst√¢ncias org√¢nicas e inorg√¢nicas.txt",
            "2.4.2": "2.4.2 - Fun√ß√µes qu√≠micas - isomeria.txt",
            "2.5.1": "2.5.1 -  Rea√ß√µes qu√≠micas - s√≠ntese, decomposi√ß√£o, deslocamento, dupla-troca.txt",
            "2.5.2": "2.5.2 - Rea√ß√µes qu√≠micas - balanceamento, ocorr√™ncia.txt",
            "2.5.3": "2.5.3 - Rea√ß√µes qu√≠micas - oxirredu√ß√£o.txt",
            "2.6.1": "2.6.1 - C√°lculo estequiom√©trico simples - f√≥rmula percentual, m√≠nima e molecular; quantidade de mat√©ria, de massa e de volume nas condi√ß√µes normais.txt",
            "2.7.1": "2.7.1 - Cin√©tica reacional - taxa de rea√ß√£o; fatores de interfer√™ncia; rea√ß√µes enzim√°ticas.txt",
            "2.8.1": "2.8.1 - Equil√≠brio qu√≠mico - perturba√ß√µes; acidez e basicidade.txt",
            "2.9.1": "2.9.1 - Fen√¥menos t√©rmicos - temperatura, calor, dilata√ß√£o t√©rmica; calor espec√≠fico, calor latente, mudan√ßas de estado, calorimetria, termoqu√≠mica.txt"
        }
        
        nome_arquivo = mapeamento_arquivos.get(topico_id)
        if nome_arquivo:
            try:
                with open(nome_arquivo, 'r', encoding='utf-8') as file:
                    conteudo = file.read()
                    return conteudo
            except FileNotFoundError:
                st.warning(f"‚ö†Ô∏è Arquivo {nome_arquivo} n√£o encontrado. Usando contexto padr√£o.")
                return None
            except Exception as e:
                st.error(f"‚ùå Erro ao ler arquivo {nome_arquivo}: {str(e)}")
                return None
        return None

    # Estrutura hier√°rquica dos temas
    ESTRUTURA_TEMAS = {
        "1.": {
            "titulo": "Os constituintes fundamentais da mat√©ria",
            "subtemas": {
                "1.1": {
                    "titulo": "√Åtomos: part√≠culas subat√¥micas; configura√ß√£o eletr√¥nica",
                    "topicos": {
                        "1.1.1": "√Åtomos: part√≠culas subat√¥micas; configura√ß√£o eletr√¥nica"
                    }
                },
                "1.2": {
                    "titulo": "Elementos qu√≠micos: massa at√¥mica, n√∫mero at√¥mico, isotopia; classifica√ß√£o peri√≥dica e propriedades peri√≥dicas",
                    "topicos": {
                        "1.2.1": "Elementos qu√≠micos: massa at√¥mica, n√∫mero at√¥mico, isotopia",
                        "1.2.2": "Elementos qu√≠micos: classifica√ß√£o peri√≥dica e propriedades peri√≥dicas"
                    }
                },
                "1.3": {
                    "titulo": "√çons e mol√©culas: liga√ß√µes qu√≠micas; geometria molecular; intera√ß√µes intermoleculares",
                    "topicos": {
                        "1.3.1": "√çons e mol√©culas: liga√ß√µes qu√≠micas",
                        "1.3.2": "√çons e mol√©culas: geometria molecular",
                        "1.3.3": "√çons e mol√©culas: intera√ß√µes intermoleculares"
                    }
                },
                "1.4": {
                    "titulo": "Bases moleculares da vida: √°cidos nucleicos; prote√≠nas; lip√≠dios; carboidratos",
                    "topicos": {
                        "1.4.1": "Bases moleculares da vida: √°cidos nucleicos; prote√≠nas; lip√≠dios; carboidratos"
                    }
                }
            }
        },
        "2.": {
            "titulo": "As subst√¢ncias e suas transforma√ß√µes",
            "subtemas": {
                "2.1": {
                    "titulo": "Subst√¢ncia pura e misturas: conceitos, propriedades, classifica√ß√µes; processos de separa√ß√£o de misturas",
                    "topicos": {
                        "2.1.1": "Subst√¢ncia pura e misturas: conceitos, propriedades, classifica√ß√µes; processos de separa√ß√£o de misturas"
                    }
                },
                "2.2": {
                    "titulo": "Solu√ß√µes: unidades de concentra√ß√£o expressas em percentagem, em g.L-1 e em quantidade de mat√©ria; dilui√ß√£o e misturas",
                    "topicos": {
                        "2.2.1": "Solu√ß√µes: unidades de concentra√ß√£o expressas em percentagem, em g.L-1 e em quantidade de mat√©ria; dilui√ß√£o e misturas"
                    }
                },
                "2.3": {
                    "titulo": "Gases ideais: transforma√ß√µes; equa√ß√£o geral dos gases; misturas gasosas",
                    "topicos": {
                        "2.3.1": "Gases ideais: transforma√ß√µes; equa√ß√£o geral dos gases; misturas gasosas"
                    }
                },
                "2.4": {
                    "titulo": "Fun√ß√µes qu√≠micas: classifica√ß√£o e nomenclatura das subst√¢ncias org√¢nicas e inorg√¢nicas; isomeria",
                    "topicos": {
                        "2.4.1": "Fun√ß√µes qu√≠micas: classifica√ß√£o e nomenclatura das subst√¢ncias org√¢nicas e inorg√¢nicas",
                        "2.4.2": "Fun√ß√µes qu√≠micas: isomeria"
                    }
                },
                "2.5": {
                    "titulo": "Rea√ß√µes qu√≠micas: s√≠ntese, decomposi√ß√£o, deslocamento, dupla-troca; balanceamento, ocorr√™ncia; oxirredu√ß√£o",
                    "topicos": {
                        "2.5.1": "Rea√ß√µes qu√≠micas: s√≠ntese, decomposi√ß√£o, deslocamento, dupla-troca",
                        "2.5.2": "Rea√ß√µes qu√≠micas: balanceamento, ocorr√™ncia",
                        "2.5.3": "Rea√ß√µes qu√≠micas: oxirredu√ß√£o"
                    }
                },
                "2.6": {
                    "titulo": "C√°lculo estequiom√©trico simples: f√≥rmula percentual, m√≠nima e molecular; quantidade de mat√©ria, de massa e de volume nas condi√ß√µes normais",
                    "topicos": {
                        "2.6.1": "C√°lculo estequiom√©trico simples: f√≥rmula percentual, m√≠nima e molecular; quantidade de mat√©ria, de massa e de volume nas condi√ß√µes normais"
                    }
                },
                "2.7": {
                    "titulo": "Cin√©tica reacional: taxa de rea√ß√£o; fatores de interfer√™ncia; rea√ß√µes enzim√°ticas",
                    "topicos": {
                        "2.7.1": "Cin√©tica reacional: taxa de rea√ß√£o; fatores de interfer√™ncia; rea√ß√µes enzim√°ticas"
                    }
                },
                "2.8": {
                    "titulo": "Equil√≠brio qu√≠mico: perturba√ß√µes; acidez e basicidade",
                    "topicos": {
                        "2.8.1": "Equil√≠brio qu√≠mico: perturba√ß√µes; acidez e basicidade"
                    }
                },
                "2.9": {
                    "titulo": "Fen√¥menos t√©rmicos: temperatura, calor, dilata√ß√£o t√©rmica; calor espec√≠fico, calor latente, mudan√ßas de estado, calorimetria, termoqu√≠mica",
                    "topicos": {
                        "2.9.1": "Fen√¥menos t√©rmicos: temperatura, calor, dilata√ß√£o t√©rmica; calor espec√≠fico, calor latente, mudan√ßas de estado, calorimetria, termoqu√≠mica"
                    }
                }
            }
        }
    }

    # Contextos espec√≠ficos para os t√≥picos dispon√≠veis
    CONTEXTOS_TOPICOS = {
        "1.1.1": """
    ## CONTEXTO: √Åtomos - part√≠culas subat√¥micas; configura√ß√£o eletr√¥nica (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Pr√≥tons, n√™utrons e el√©trons - identifica√ß√£o e c√°lculos
    - Estrutura nuclear e suas propriedades
    - N√∫mero at√¥mico e n√∫mero de massa - rela√ß√µes e aplica√ß√µes
    - Is√≥topos e suas propriedades espec√≠ficas
    - Radioatividade e processos de decaimento nuclear
    - Part√≠culas subat√¥micas em rea√ß√µes nucleares
    - Distribui√ß√£o eletr√¥nica em subn√≠veis (s, p, d, f) com justificativas
    - Configura√ß√£o eletr√¥nica fundamental e excitada - compara√ß√µes
    - Ordem energ√©tica dos orbitais - explica√ß√µes te√≥ricas
    - Configura√ß√£o baseada em g√°s nobre - vantagens e aplica√ß√µes
    - Camadas eletr√¥nicas (K, L, M, N, O, P, Q) - determina√ß√£o e an√°lise
    - El√©trons de val√™ncia - identifica√ß√£o e import√¢ncia qu√≠mica

    Exemplos de quest√µes discursivas incluem:
    - Aluminotermia e configura√ß√£o eletr√¥nica do van√°dio
    - Fus√£o nuclear e is√≥topos do hidrog√™nio
    - S√≠ntese de elementos superpesados
    - Decaimento radioativo e transmuta√ß√£o nuclear
    - Estrutura nuclear e part√≠culas subat√¥micas
    - Determina√ß√£o completa da configura√ß√£o eletr√¥nica com justificativas
    - Identifica√ß√£o e explica√ß√£o do subn√≠vel de maior energia
    - C√°lculo e an√°lise do n√∫mero de camadas eletr√¥nicas
    """,
        "1.2.1": """
    ## CONTEXTO: Elementos qu√≠micos - massa at√¥mica, n√∫mero at√¥mico, isotopia (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - N√∫mero at√¥mico (Z) e n√∫mero de massa (A) - defini√ß√µes e aplica√ß√µes
    - Conceito de is√≥topos - semelhan√ßas e diferen√ßas detalhadas
    - Nota√ß√£o isot√≥pica (A_Z X) - interpreta√ß√£o e uso
    - C√°lculos complexos com is√≥topos e justificativas
    - Aplica√ß√µes dos is√≥topos (data√ß√£o, medicina nuclear) com an√°lises
    - Abund√¢ncia isot√≥pica - c√°lculos e significado
    - Decaimento radioativo e meia-vida
    - Elementos artificiais e transmuta√ß√£o nuclear

    Exemplos de quest√µes discursivas incluem:
    - Elementos essenciais ao organismo e is√≥topos predominantes
    - Decaimento radioativo de radiois√≥topos (rad√¥nio, carbono-14)
    - S√≠ntese de elementos superpesados em aceleradores
    - An√°lise de is√≥topos do hidrog√™nio na fus√£o nuclear
    - C√°lculos de meia-vida e cin√©tica de decaimento
    - Aplica√ß√µes m√©dicas e arqueol√≥gicas de is√≥topos
    """,
        "1.2.2": """
    ## CONTEXTO: Elementos qu√≠micos - classifica√ß√£o peri√≥dica e propriedades peri√≥dicas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Organiza√ß√£o da tabela peri√≥dica (grupos e per√≠odos) - an√°lise hist√≥rica
    - Fam√≠lias qu√≠micas (metais alcalinos, alcalino terrosos, halog√™nios, gases nobres)
    - Propriedades peri√≥dicas: raio at√¥mico, energia de ioniza√ß√£o, eletronegatividade
    - Evolu√ß√£o hist√≥rica da tabela peri√≥dica - Mendeleiev vs. atual
    - Metais, ametais e semimetais - classifica√ß√£o e propriedades
    - Propriedades dos elementos e suas aplica√ß√µes pr√°ticas
    - Tend√™ncias nos grupos e per√≠odos
    - Anomalias na classifica√ß√£o peri√≥dica

    Exemplos de quest√µes discursivas incluem:
    - Tabela de Mendeleiev e classifica√ß√£o atual (Te-I)
    - Metais de transi√ß√£o e propriedades (meteorito do Bendeg√≥)
    - S√≠ntese de elementos superpesados e grupos da tabela
    - Regra do octeto e estabilidade eletr√¥nica
    - S√≠mbolos qu√≠micos e propriedades peri√≥dicas
    - Metais das medalhas ol√≠mpicas e suas propriedades
    - Minerais carbonatados e raio at√¥mico
    """,
        "1.3.1": """
    ## CONTEXTO: √çons e mol√©culas - liga√ß√µes qu√≠micas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Liga√ß√µes qu√≠micas: i√¥nica, covalente e met√°lica - caracter√≠sticas e diferen√ßas
    - Forma√ß√£o de compostos i√¥nicos e moleculares - mecanismos e justificativas
    - Polaridade de liga√ß√µes qu√≠micas - diferen√ßa de eletronegatividade
    - Estados de oxida√ß√£o e sua determina√ß√£o em compostos
    - Propriedades dos compostos relacionadas ao tipo de liga√ß√£o
    - F√≥rmulas qu√≠micas e estruturais de compostos i√¥nicos e moleculares
    - Energia de liga√ß√£o e estabilidade de compostos

    Exemplos de quest√µes discursivas incluem:
    - Ciclo do nitrog√™nio e fixa√ß√£o biol√≥gica
    - Garimpo ilegal e liga√ß√£o met√°lica (am√°lgama Hg-Au)
    - Baterias de sal fundido e liga√ß√£o i√¥nica
    - Regra do octeto e forma√ß√£o de fluoreto de s√≥dio
    - Carbonato de magn√©sio e liga√ß√µes qu√≠micas
    - Di√≥xido de zirc√¥nio e liga√ß√£o i√¥nica
    - Meteorito do Bendeg√≥ e liga√ß√£o met√°lica
    """,
        "1.3.2": """
    ## CONTEXTO: √çons e mol√©culas - geometria molecular (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Teoria VSEPR (repuls√£o dos pares eletr√¥nicos) - aplica√ß√£o e previs√µes
    - Geometrias moleculares: linear, angular, trigonal plana, tetra√©drica, piramidal
    - Polaridade molecular - momento dipolar e sua determina√ß√£o
    - Rela√ß√£o entre geometria molecular e propriedades f√≠sicas
    - Hibridiza√ß√£o de orbitais at√¥micos - tipos e caracter√≠sticas
    - Influ√™ncia da geometria nas propriedades qu√≠micas e biol√≥gicas
    - √Çngulos de liga√ß√£o e justificativas te√≥ricas

    Exemplos de quest√µes discursivas incluem:
    - Gases do efeito estufa e geometria molecular (CO‚ÇÇ, CH‚ÇÑ, N‚ÇÇO, O‚ÇÉ)
    - S√≠ntese industrial de am√¥nia e geometria piramidal
    - S√≠mbolos qu√≠micos e geometria molecular (metano)
    - √ìxidos de enxofre e geometria molecular
    - S√≠ntese eletrocatal√≠tica e f√≥rmulas estruturais
    - Processo industrial e geometria do metanal
    - Anabolizantes e geometria molecular
    """,
        "1.3.3": """
    ## CONTEXTO: √çons e mol√©culas - intera√ß√µes intermoleculares (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - For√ßas intermoleculares: van der Waals, dipolo-dipolo, liga√ß√µes de hidrog√™nio
    - Rela√ß√£o entre for√ßas intermoleculares e propriedades f√≠sicas
    - Pontos de ebuli√ß√£o e fus√£o - influ√™ncia das intera√ß√µes moleculares
    - Solubilidade e miscibilidade - princ√≠pio "semelhante dissolve semelhante"
    - Tens√£o superficial e viscosidade - explica√ß√µes moleculares
    - Estruturas cristalinas e empacotamento molecular
    - Propriedades coligativas e intera√ß√µes

    Exemplos de quest√µes discursivas incluem:
    - Isomeria plana e propriedades f√≠sicas (pentanos)
    - Processo industrial e propriedades coligativas
    - Solu√ß√µes de √°cido clor√≠drico e liga√ß√µes de hidrog√™nio
    - √ìxidos de enxofre e solubilidade
    - Poder oxidante e polaridade molecular
    - Temperaturas de ebuli√ß√£o e ramifica√ß√£o molecular
    """,
        "1.4.1": """
    ## CONTEXTO: Bases moleculares da vida - √°cidos nucleicos; prote√≠nas; lip√≠dios; carboidratos (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Estrutura e fun√ß√£o dos √°cidos nucleicos (DNA, RNA)
    - Amino√°cidos e estrutura das prote√≠nas
    - Classifica√ß√£o e propriedades dos lip√≠dios
    - Monossacar√≠deos, dissacar√≠deos e polissacar√≠deos
    - Fun√ß√µes biol√≥gicas das biomol√©culas
    - Metabolismo e processos bioqu√≠micos
    - Rela√ß√£o estrutura-fun√ß√£o nas biomol√©culas

    Exemplos de quest√µes discursivas incluem:
    - Estrutura do DNA e replica√ß√£o
    - S√≠ntese proteica e c√≥digo gen√©tico
    - Metabolismo de carboidratos
    - Fun√ß√£o dos lip√≠dios nas membranas
    - Enzimas e cat√°lise biol√≥gica
    """,
        "2.1.1": """
    ## CONTEXTO: Subst√¢ncia pura e misturas - conceitos, propriedades, classifica√ß√µes; processos de separa√ß√£o de misturas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Subst√¢ncias puras vs. misturas homog√™neas e heterog√™neas
    - Propriedades f√≠sicas e qu√≠micas
    - M√©todos de separa√ß√£o: filtra√ß√£o, destila√ß√£o, cristaliza√ß√£o
    - Processos de purifica√ß√£o
    - Crit√©rios de pureza
    - Aplica√ß√µes industriais dos m√©todos de separa√ß√£o

    Exemplos de quest√µes discursivas incluem:
    - Separa√ß√£o de componentes em misturas
    - Destila√ß√£o fracionada de petr√≥leo
    - Purifica√ß√£o de subst√¢ncias
    - An√°lise de pureza de reagentes
    """,
        "2.2.1": """
    ## CONTEXTO: Solu√ß√µes - unidades de concentra√ß√£o expressas em percentagem, em g.L-1 e em quantidade de mat√©ria; dilui√ß√£o e misturas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Concentra√ß√£o em percentagem, g/L e mol/L
    - C√°lculos de dilui√ß√£o e mistura de solu√ß√µes
    - Propriedades das solu√ß√µes
    - Solubilidade e fatores que a influenciam
    - Curvas de solubilidade
    - Solu√ß√µes saturadas, insaturadas e supersaturadas

    Exemplos de quest√µes discursivas incluem:
    - C√°lculos de concentra√ß√£o molar
    - Dilui√ß√£o de √°cidos concentrados
    - Mistura de solu√ß√µes com diferentes concentra√ß√µes
    - An√°lise de solubilidade de compostos
    """,
        "2.3.1": """
    ## CONTEXTO: Gases ideais - transforma√ß√µes; equa√ß√£o geral dos gases; misturas gasosas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Leis dos gases ideais (Boyle, Charles, Gay-Lussac)
    - Equa√ß√£o geral dos gases (PV = nRT)
    - Transforma√ß√µes gasosas isot√©rmicas, isob√°ricas e isoc√≥ricas
    - Misturas gasosas e press√µes parciais
    - Lei de Dalton das press√µes parciais
    - Densidade dos gases e massa molar

    Exemplos de quest√µes discursivas incluem:
    - Transforma√ß√µes de gases em diferentes condi√ß√µes
    - C√°lculos com a equa√ß√£o geral dos gases
    - Misturas gasosas na atmosfera
    - Aplica√ß√µes industriais dos gases
    """,
        "2.4.1": """
    ## CONTEXTO: Fun√ß√µes qu√≠micas - classifica√ß√£o e nomenclatura das subst√¢ncias org√¢nicas e inorg√¢nicas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Fun√ß√µes inorg√¢nicas: √°cidos, bases, sais e √≥xidos
    - Fun√ß√µes org√¢nicas: hidrocarbonetos, √°lcoois, alde√≠dos, cetonas, √°cidos carbox√≠licos
    - Nomenclatura IUPAC e usual
    - Propriedades qu√≠micas das diferentes fun√ß√µes
    - Aplica√ß√µes pr√°ticas dos compostos
    - Identifica√ß√£o de grupos funcionais

    Exemplos de quest√µes discursivas incluem:
    - Nomenclatura de compostos org√¢nicos e inorg√¢nicos
    - Classifica√ß√£o de √≥xidos (neutros, √°cidos, b√°sicos)
    - Identifica√ß√£o de fun√ß√µes em mol√©culas complexas
    - Propriedades relacionadas aos grupos funcionais
    """,
        "2.4.2": """
    ## CONTEXTO: Fun√ß√µes qu√≠micas - isomeria (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Isomeria plana: cadeia, posi√ß√£o, fun√ß√£o, compensa√ß√£o
    - Isomeria espacial: √≥ptica e geom√©trica
    - Carbonos assim√©tricos e atividade √≥ptica
    - Propriedades f√≠sicas de is√¥meros
    - Rela√ß√£o entre isomeria e atividade biol√≥gica
    - Aplica√ß√µes farmacol√≥gicas da isomeria

    Exemplos de quest√µes discursivas incluem:
    - Is√¥meros planos de pentanos e propriedades f√≠sicas
    - Carbonos assim√©tricos em f√°rmacos
    - Isomeria √≥ptica e atividade biol√≥gica
    - S√≠ntese org√¢nica e mecanismos reacionais
    """,
        "2.5.1": """
    ## CONTEXTO: Rea√ß√µes qu√≠micas - s√≠ntese, decomposi√ß√£o, deslocamento, dupla-troca (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Tipos de rea√ß√µes qu√≠micas e suas caracter√≠sticas
    - Rea√ß√µes de s√≠ntese (combina√ß√£o)
    - Rea√ß√µes de decomposi√ß√£o (an√°lise)
    - Rea√ß√µes de deslocamento (simples troca)
    - Rea√ß√µes de dupla-troca (met√°tese)
    - Previs√£o de produtos de rea√ß√£o
    - Condi√ß√µes reacionais

    Exemplos de quest√µes discursivas incluem:
    - Classifica√ß√£o de rea√ß√µes qu√≠micas
    - Previs√£o de produtos em diferentes tipos de rea√ß√£o
    - Aplica√ß√µes industriais das rea√ß√µes
    - Mecanismos de rea√ß√£o
    """,
        "2.5.2": """
    ## CONTEXTO: Rea√ß√µes qu√≠micas - balanceamento, ocorr√™ncia (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Balanceamento de equa√ß√µes qu√≠micas
    - Lei da conserva√ß√£o da massa
    - Condi√ß√µes para ocorr√™ncia de rea√ß√µes
    - Fatores que influenciam a velocidade de rea√ß√£o
    - Energia de ativa√ß√£o
    - Catalisadores e inibidores

    Exemplos de quest√µes discursivas incluem:
    - Balanceamento de equa√ß√µes complexas
    - An√°lise de condi√ß√µes reacionais
    - Fatores que favorecem ou desfavorecem rea√ß√µes
    - Papel dos catalisadores
    """,
        "2.5.3": """
    ## CONTEXTO: Rea√ß√µes qu√≠micas - oxirredu√ß√£o (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Conceitos de oxida√ß√£o e redu√ß√£o
    - N√∫mero de oxida√ß√£o (NOX)
    - Agentes oxidantes e redutores
    - Balanceamento de equa√ß√µes redox
    - C√©lulas eletroqu√≠micas e eletr√≥lise
    - Potenciais de redu√ß√£o
    - Aplica√ß√µes da eletroqu√≠mica

    Exemplos de quest√µes discursivas incluem:
    - Aluminotermia e agentes redutores
    - Rea√ß√µes redox e pureza de reagentes
    - Baterias e c√©lulas eletrol√≠ticas
    - Eletr√≥lise em s√©rie
    - Poder oxidante e potenciais eletroqu√≠micos
    """,
        "2.6.1": """
    ## CONTEXTO: C√°lculo estequiom√©trico simples - f√≥rmula percentual, m√≠nima e molecular; quantidade de mat√©ria, de massa e de volume nas condi√ß√µes normais (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - F√≥rmulas qu√≠micas: percentual, m√≠nima e molecular
    - Conceito de mol e quantidade de mat√©ria
    - Massa molar e constante de Avogadro
    - Volume molar nas CNTP
    - C√°lculos estequiom√©tricos simples
    - Rendimento de rea√ß√µes
    - Pureza de reagentes

    Exemplos de quest√µes discursivas incluem:
    - Determina√ß√£o de f√≥rmulas moleculares
    - C√°lculos com quantidade de mat√©ria
    - Estequiometria com pureza de reagentes
    - Rendimento te√≥rico vs. real
    """,
        "2.7.1": """
    ## CONTEXTO: Cin√©tica reacional - taxa de rea√ß√£o; fatores de interfer√™ncia; rea√ß√µes enzim√°ticas (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Velocidade de rea√ß√£o e fatores que a influenciam
    - Teoria das colis√µes e energia de ativa√ß√£o
    - Cat√°lise homog√™nea e heterog√™nea
    - Enzimas como catalisadores biol√≥gicos
    - Mecanismos de rea√ß√£o
    - Ordem de rea√ß√£o e leis de velocidade

    Exemplos de quest√µes discursivas incluem:
    - Fatores que afetam a velocidade de rea√ß√£o
    - Mecanismo de a√ß√£o das enzimas
    - Efeito da temperatura e concentra√ß√£o
    - Cat√°lise industrial
    """,
        "2.8.1": """
    ## CONTEXTO: Equil√≠brio qu√≠mico - perturba√ß√µes; acidez e basicidade (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Conceito de equil√≠brio qu√≠mico
    - Princ√≠pio de Le Chatelier
    - Constante de equil√≠brio (Kc, Kp)
    - Fatores que deslocam o equil√≠brio
    - Teorias √°cido-base (Arrhenius, Br√∏nsted-Lowry, Lewis)
    - pH, pOH e for√ßa de √°cidos e bases
    - Hidr√≥lise de sais

    Exemplos de quest√µes discursivas incluem:
    - S√≠ntese industrial de am√¥nia (processo Haber)
    - Efeito de temperatura e press√£o no equil√≠brio
    - C√°lculos de pH e pOH
    - Teoria √°cido-base de Lewis
    """,
        "2.9.1": """
    ## CONTEXTO: Fen√¥menos t√©rmicos - temperatura, calor, dilata√ß√£o t√©rmica; calor espec√≠fico, calor latente, mudan√ßas de estado, calorimetria, termoqu√≠mica (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Conceitos de temperatura e calor
    - Dilata√ß√£o t√©rmica de s√≥lidos, l√≠quidos e gases
    - Calor espec√≠fico e capacidade calor√≠fica
    - Calor latente e mudan√ßas de estado
    - Calorimetria e balan√ßo t√©rmico
    - Termoqu√≠mica: entalpia, calor de forma√ß√£o, combust√£o
    - Leis da termodin√¢mica

    Exemplos de quest√µes discursivas incluem:
    - C√°lculos de dilata√ß√£o t√©rmica
    - Calorimetria e balan√ßo energ√©tico
    - Entalpias de rea√ß√£o
    - Mudan√ßas de estado e energia
    """
    }

    def get_contexto_completo(topico_id):
        """Retorna o contexto completo para um t√≥pico espec√≠fico"""
        # Primeiro tenta carregar do arquivo .txt
        contexto_arquivo = carregar_contexto_arquivo(topico_id)
        
        if contexto_arquivo:
            # Se arquivo foi carregado com sucesso, usa seu conte√∫do
            return contexto_arquivo
        else:
            # Fallback para contexto hardcoded se arquivo n√£o existir
            contexto_base = CONTEXTOS_TOPICOS.get(topico_id, "")
            
            # Adiciona exemplos de quest√µes baseados nos documentos fornecidos
            if topico_id in ["1.1.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Aluminotermia e configura√ß√£o eletr√¥nica do van√°dio
    - Fus√£o nuclear e is√≥topos do hidrog√™nio
    - S√≠ntese de elementos superpesados
    - Decaimento radioativo e transmuta√ß√£o nuclear
    - Estrutura nuclear e part√≠culas subat√¥micas
    """
            elif topico_id in ["1.2.1", "1.2.2"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Propriedades peri√≥dicas e elementos essenciais
    - Tabela de Mendeleiev vs. classifica√ß√£o atual
    - Metais de transi√ß√£o e suas propriedades
    - Fam√≠lias qu√≠micas e forma√ß√£o de compostos
    - S√≠ntese de elementos superpesados
    """
            elif topico_id in ["1.3.1", "1.3.2", "1.3.3"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Ciclo do nitrog√™nio e liga√ß√µes qu√≠micas
    - Garimpo ilegal e propriedades dos metais
    - Isomeria plana e propriedades f√≠sicas
    - Gases do efeito estufa e geometria molecular
    - Rea√ß√µes redox e polaridade molecular
    - Baterias de sal fundido e eletroqu√≠mica
    """
            elif topico_id in ["2.5.3"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Aluminotermia e agentes redutores
    - Eletr√≥lise em s√©rie com c√©lulas eletrol√≠ticas
    - Poder oxidante de hipoclorito e oz√¥nio
    - Baterias e potenciais eletroqu√≠micos
    """
            
            return contexto_base


    def gerar_questao(client, tema, subtema, topico, num_questoes, dificuldade):
        """Gera quest√µes discursivas usando a API do Claude"""
        
        contexto_topico = get_contexto_completo(topico.split(' ', 1)[0] if ' ' in topico else topico)
        
        prompt = f"""
    Como professor experiente de Qu√≠mica da UERJ, elabore EXATAMENTE {num_questoes} quest√£o(√µes) discursiva(s) original(is) sobre o t√≥pico:

    **TEMA:** {tema}
    **SUBTEMA:** {subtema}  
    **T√ìPICO:** {topico}

    **CONTEXTO DO T√ìPICO:**
    {contexto_topico}

    **INSTRU√á√ïES ESPEC√çFICAS:**
    1. Crie APENAS quest√µes DISCURSIVAS no estilo UERJ (contextualizada, interdisciplinar quando poss√≠vel)
    2. Dificuldade: {dificuldade}
    3. Inclua dados necess√°rios, tabelas ou gr√°ficos quando apropriado
    4. As quest√µes devem ser claras, bem estruturadas e desafiadoras
    5. N√ÉO use alternativas de m√∫ltipla escolha - apenas quest√µes abertas
    6. Use contextos reais e aplica√ß√µes pr√°ticas
    7. Inclua c√°lculos quando necess√°rio
    8. Mantenha consist√™ncia com o padr√£o UERJ de quest√µes discursivas

    **CARACTER√çSTICAS DAS QUEST√ïES DISCURSIVAS UERJ:**
    - Contextualiza√ß√£o com situa√ß√µes reais e atuais
    - Interdisciplinaridade quando poss√≠vel
    - M√∫ltiplas habilidades em uma quest√£o
    - Dados experimentais ou situa√ß√µes pr√°ticas
    - Aplica√ß√£o de conceitos te√≥ricos em contextos reais
    - Respostas que exigem desenvolvimento, explica√ß√£o e justificativa
    - Quest√µes que avaliam capacidade de an√°lise e s√≠ntese

    **FORMATO OBRIGAT√ìRIO DE RESPOSTA:**
    Para cada quest√£o, forne√ßa EXATAMENTE:

    """ + "\n".join([f"""
    ### QUEST√ÉO {i}
    [Enunciado completo com contexto rico e situa√ß√£o real]

    [Dados, tabelas ou informa√ß√µes complementares se necess√°rio]

    **O que se pede:**
    a) [Primeira pergunta discursiva]
    b) [Segunda pergunta discursiva]
    c) [Terceira pergunta discursiva - se aplic√°vel]""" for i in range(1, num_questoes + 1)]) + f"""

    """ + "\n".join([f"""
    ### GABARITO E SOLU√á√ÉO DETALHADA {i}
    **Solu√ß√£o completa:**

    **Item a)**
    [Resposta esperada detalhada]
    [Desenvolvimento passo a passo]
    [C√°lculos quando necess√°rio]

    **Item b)**
    [Resposta esperada detalhada]
    [Desenvolvimento passo a passo]
    [Justificativas te√≥ricas]

    **Item c)** (se aplic√°vel)
    [Resposta esperada detalhada]
    [Explica√ß√µes conceituais]

    **Conceitos envolvidos:**
    - [conceito qu√≠mico 1]
    - [conceito qu√≠mico 2]
    - [conceito qu√≠mico 3]
    - [aplica√ß√µes pr√°ticas]""" for i in range(1, num_questoes + 1)]) + f"""

    ---

    IMPORTANTE: Gere EXATAMENTE {num_questoes} quest√£o(√µes) discursiva(s) agora, seguindo rigorosamente este formato. N√ÉO inclua alternativas de m√∫ltipla escolha."""


        try:
            response = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                temperature=0.7,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            return response.content[0].text
        except Exception as e:
            st.error(f"Erro detalhado: {str(e)}")
            return f"‚ùå **Erro ao gerar quest√£o**\n\nDetalhes t√©cnicos: {str(e)}\n\nVerifique:\n- Conex√£o com internet\n- Validade da chave API\n- Configura√ß√£o dos secrets"

    def main():
        st.title("üß™ Gerador de Quest√µes Discursivas UERJ - Qu√≠mica")
        st.markdown("*Sistema inteligente para cria√ß√£o de quest√µes discursivas de vestibular baseado no padr√£o UERJ*")

        # ADICIONAR ESTA PARTE - Sistema de navega√ß√£o
        tab1, tab2 = st.tabs(["üöÄ Gerador de Quest√µes", "üìä An√°lise Estat√≠stica"])
        
        with tab1:
            # TODO O C√ìDIGO EXISTENTE DA FUN√á√ÉO main() DEVE FICAR AQUI (indentado)
            # Mover todo o resto do c√≥digo da fun√ß√£o main() para dentro desta aba
            
            # Inicializar cliente
            client = init_anthropic_client()
            if not client:
                st.stop()
            
            # CSS personalizado para melhorar apar√™ncia
            st.markdown("""
            <style>
            .stSelectbox > div > div > select {
                background-color: #f0f2f6;
            }
            .success-box {
                padding: 1rem;
                border-radius: 0.5rem;
                background-color: #d4edda;
                border: 1px solid #c3e6cb;
                color: #155724;
                margin: 1rem 0;
            }
            .info-card {
                padding: 1.5rem;
                border-radius: 0.5rem;
                background-color: #e3f2fd;
                border-left: 4px solid #2196f3;
                margin: 1rem 0;
            }
            </style>
            """, unsafe_allow_html=True)
            
            # Sidebar para sele√ß√£o
            st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
            
            # Sele√ß√£o do tema
            temas_opcoes = {f"{k} {v['titulo']}": k for k, v in ESTRUTURA_TEMAS.items()}
            tema_selecionado = st.sidebar.selectbox(
                "üìö Selecione o Tema:",
                list(temas_opcoes.keys()),
                help="Escolha o tema principal do conte√∫do"
            )
            tema_id = temas_opcoes[tema_selecionado]
            
            # Sele√ß√£o do subtema
            subtemas_disponiveis = ESTRUTURA_TEMAS[tema_id]["subtemas"]
            subtemas_opcoes = {f"{k} {v['titulo']}": k for k, v in subtemas_disponiveis.items()}
            subtema_selecionado = st.sidebar.selectbox(
                "üìñ Selecione o Subtema:",
                list(subtemas_opcoes.keys()),
                help="Escolha o subtema espec√≠fico"
            )
            subtema_id = subtemas_opcoes[subtema_selecionado]
            
            # Sele√ß√£o do t√≥pico
            topicos_disponiveis = subtemas_disponiveis[subtema_id]["topicos"]
            if topicos_disponiveis:
                topicos_opcoes = {f"{k} {v}": k for k, v in topicos_disponiveis.items()}
                topico_selecionado = st.sidebar.selectbox(
                    "üìù Selecione o T√≥pico:",
                    list(topicos_opcoes.keys()),
                    help="Escolha o t√≥pico espec√≠fico para a quest√£o"
                )
                topico_id = topicos_opcoes[topico_selecionado]
                contexto_disponivel = topico_id in CONTEXTOS_TOPICOS
            else:
                st.sidebar.warning("‚ö†Ô∏è Este subtema n√£o possui t√≥picos espec√≠ficos dispon√≠veis.")
                topico_selecionado = subtema_selecionado
                topico_id = subtema_id
                contexto_disponivel = False
            
            # Indicador de contexto dispon√≠vel
            if contexto_disponivel:
                # Verificar se o contexto vem de arquivo ou √© hardcoded
                contexto_arquivo = carregar_contexto_arquivo(topico_id)
                if contexto_arquivo:
                    st.sidebar.success("‚úÖ Contexto especializado carregado do arquivo")
                else:
                    st.sidebar.success("‚úÖ Contexto especializado dispon√≠vel")
            else:
                st.sidebar.info("‚ÑπÔ∏è Usando contexto geral do subtema")
                    
            # Configura√ß√µes adicionais
            #st.sidebar.markdown("---")
            st.sidebar.markdown("### üéõÔ∏è Par√¢metros de Gera√ß√£o")
            
            # Sele√ß√£o do n√∫mero de quest√µes
            #st.sidebar.markdown("---")
            num_questoes = st.sidebar.slider("üî¢ N√∫mero de quest√µes:", 1, 5, 1)
            dificuldade = st.sidebar.selectbox(
                "üìä N√≠vel de dificuldade:",
                ["f√°cil", "m√©dia", "dif√≠cil"]
            )
                
            # Configura√ß√µes avan√ßadas
            with st.sidebar.expander("üîß Caracter√≠sticas das Quest√µes"):
                st.markdown("""
                ‚úÖ **Formato:** Apenas quest√µes discursivas  
                ‚úÖ **Estrutura:** Contexto + m√∫ltiplos itens  
                ‚úÖ **Estilo:** Padr√£o UERJ contextualizado  
                ‚úÖ **Quantidade:** Entre 1 e 5: o usu√°rio escolhe  
                ‚úÖ **C√°lculos:** Inclu√≠dos quando necess√°rio  
                ‚úÖ **Interdisciplinar:** Quando aplic√°vel  
                """)
            
            # Bot√£o para gerar quest√µes
            texto_botao = f"üöÄ Gerar {num_questoes} Quest√£o{'s' if num_questoes > 1 else ''} Discursiva{'s' if num_questoes > 1 else ''}"
            gerar_button = st.sidebar.button(texto_botao, type="primary", use_container_width=True)
                
            if gerar_button:
                # Valida√ß√µes
                if not client:
                    st.error("‚ùå Cliente Anthropic n√£o inicializado. Verifique a configura√ß√£o da API key.")
                    return
                    
                # Mostrar informa√ß√µes da sele√ß√£o
                st.markdown("### üìã Quest√µes Sendo Geradas:")
                
                # Verificar fonte do contexto
                contexto_arquivo = carregar_contexto_arquivo(topico_id) if contexto_disponivel else None
                fonte_contexto = "Arquivo especializado" if contexto_arquivo else ("Especializado" if contexto_disponivel else "Geral")
                
                st.markdown(f"""
                <div class="info-card">
                <strong>üìö Tema:</strong> {tema_selecionado}<br>
                <strong>üìñ Subtema:</strong> {subtema_selecionado}<br>
                <strong>üìù T√≥pico:</strong> {topico_selecionado}<br>
                <strong>üìä Dificuldade:</strong> {dificuldade.title()}<br>
                <strong>üéØ Contexto:</strong> {fonte_contexto}<br>
                <strong>üìÅ Fonte:</strong> {'Arquivo .txt' if contexto_arquivo else 'C√≥digo interno'}
                <strong>üî¢ Quantidade:</strong> {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} discursiva{'s' if num_questoes > 1 else ''}<br>
                </div>
                """, unsafe_allow_html=True)
                        
                # Progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                with st.spinner("üîÑ Gerando quest√µes... Por favor, aguarde."):
                    status_text.text("ü§ñ Conectando com IA...")
                    progress_bar.progress(25)
                    
                    status_text.text(f"üìù Elaborando {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} discursiva{'s' if num_questoes > 1 else ''}...")

                    progress_bar.progress(50)
                    
                    resultado = gerar_questao(
                        client, 
                        tema_selecionado, 
                        subtema_selecionado, 
                        topico_selecionado,
                        num_questoes,
                        dificuldade
                    )
                    
                    status_text.text("‚úÖ Processando resultado...")
                    progress_bar.progress(75)
                    
                    progress_bar.progress(100)
                    status_text.text(f"üéâ {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} gerada{'s' if num_questoes > 1 else ''} com sucesso!")

                
                # Limpar elementos de progresso ap√≥s um delay
                import time
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
                
                # Verificar se houve erro
                if resultado.startswith("‚ùå"):
                    st.error(resultado)
                    return
                
                # Exibir resultado
                st.markdown("---")
                st.markdown("## üìã Quest√µes Geradas")
                
                # Dividir o resultado em quest√µes e gabaritos
                partes = resultado.split("### GABARITO E SOLU√á√ÉO DETALHADA")
                
                if len(partes) > 1:
                    # Exibir quest√µes
                    questoes_parte = partes[0]
                    st.markdown(questoes_parte)
                    
                    # Bot√£o para download das quest√µes (futuro)
                    col1, col2, col3 = st.columns([1, 1, 1])
                    with col2:
                        st.markdown("""
                        <div class="success-box">
                        ‚úÖ Quest√µes geradas com sucesso! Use os expanders abaixo para ver as solu√ß√µes.
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # Exibir gabaritos em expanders
                    st.markdown("---")
                    st.markdown("## üîë Gabaritos e Solu√ß√µes Detalhadas")
                    st.markdown("*Clique nos cards abaixo para visualizar as solu√ß√µes completas*")
                    
                    for i in range(1, len(partes)):
                        gabarito_parte = "### GABARITO E SOLU√á√ÉO DETALHADA" + partes[i]
                        
                        # Extrair n√∫mero da quest√£o para o t√≠tulo do expander
                        linhas = gabarito_parte.split('\n')
                        titulo_questao = linhas[0].replace("### GABARITO E SOLU√á√ÉO DETALHADA", "Solu√ß√£o da Quest√£o") if linhas else f"Solu√ß√£o da Quest√£o {i}"
                        
                        with st.expander(f"üí° {titulo_questao}", expanded=False):
                            st.markdown(gabarito_parte)
                            
                            # Bot√µes de a√ß√£o para cada solu√ß√£o
                            col1, col2 = st.columns([1, 1])
                            with col1:
                                if st.button(f"üìã Copiar Quest√£o {i}", key=f"copy_{i}"):
                                    st.success("Funcionalidade de c√≥pia ser√° implementada!")
                            with col2:
                                if st.button(f"‚≠ê Favoritar {i}", key=f"fav_{i}"):
                                    st.success("Quest√£o favoritada!")
                else:
                    # Se n√£o conseguiu dividir, exibir tudo
                    st.markdown(resultado)
                    
                # Feedback do usu√°rio
                st.markdown("---")
                st.markdown("### üìù Feedback")
                col1, col2 = st.columns([1, 1])
                with col1:
                    rating = st.selectbox("Avalie a qualidade das quest√µes:", 
                                        ["Selecione...", "‚≠ê Ruim", "‚≠ê‚≠ê Regular", "‚≠ê‚≠ê‚≠ê Bom", "‚≠ê‚≠ê‚≠ê‚≠ê Muito Bom", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excelente"])
                with col2:
                    if st.button("üì§ Enviar Feedback"):
                        if rating != "Selecione...":
                            st.success("Obrigado pelo feedback!")
                        else:
                            st.warning("Por favor, selecione uma avalia√ß√£o.")
            
            # Informa√ß√µes adicionais na sidebar
            st.sidebar.markdown("---")
            st.sidebar.markdown("### ‚ÑπÔ∏è Informa√ß√µes do Sistema")
            st.sidebar.info(
                "ü§ñ **IA:** Claude Sonnet 4\n\n"
                "üìä **Base:** Quest√µes UERJ reais\n\n"
                "üìù **Formato:** Apenas discursivas\n\n"
                "üî¢ **Quantidade:** 1-5 quest√µes/gera√ß√£o\n\n"
                "‚úÖ **Status:** Operacional"
            )
            
            # Estat√≠sticas na sidebar
            with st.sidebar.expander("üìà Estat√≠sticas"):
                st.markdown("""
                **Temas dispon√≠veis:** 2  
                **Subtemas:** 9  
                **T√≥picos espec√≠ficos:** 20  
                **Contextos detalhados:** 19  
                **Formato:** Quest√µes discursivas apenas
                **Quest√µes por gera√ß√£o:** 1-5 (configur√°vel)
                
                **√öltima atualiza√ß√£o:** Dezembro 2024
                """)
                    
            # √Årea principal com informa√ß√µes quando nenhuma quest√£o foi gerada
            if not gerar_button:
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown("""
                    ### üéØ Como usar este sistema:
                    
                    1. **üìö Selecione o tema** na barra lateral
                    2. **üìñ Escolha o subtema** relacionado
                    3. **üìù Escolha o t√≥pico espec√≠fico** (quando dispon√≠vel)
                    4. **‚öôÔ∏è Configure** o n√∫mero de quest√µes e dificuldade
                    5. **üöÄ Clique em "Gerar Quest√µes"** para criar as quest√µes
                    
                    ### üî¨ Todos os T√≥picos com contexto especializado:
                    - ‚úÖ **Tema 1:** 6 t√≥picos com contexto completo
                    - ‚úÖ **Tema 2:** 13 t√≥picos com contexto completo
                    - üìÅ **Fonte:** Arquivos .txt com quest√µes dos vestibulares de 2013 a 2025
                    
                    ### üìä Recursos do sistema:
                    - ‚úÖ Quest√µes contextualizadas no estilo UERJ
                    - ‚úÖ Gabaritos com solu√ß√µes detalhadas passo a passo
                    - ‚úÖ M√∫ltiplos n√≠veis de dificuldade
                    - ‚úÖ Baseado em quest√µes reais de vestibulares
                    - ‚úÖ Interface intuitiva e responsiva
                    - ‚úÖ Sistema de feedback integrado
                    """)
                
                with col2:
                    st.markdown("""
                    ### üìà Vis√£o Geral dos Conte√∫dos:
                    
                    **üß¨ Tema 1 - Constituintes da mat√©ria:**
                    - 4 subtemas principais
                    - 6 t√≥picos espec√≠ficos
                    - Foco em estrutura at√¥mica
                    
                    **‚öóÔ∏è Tema 2 - Subst√¢ncias e transforma√ß√µes:**
                    - 9 subtemas principais  
                    - 14 t√≥picos espec√≠ficos
                    - Foco em rea√ß√µes e processos
                                
                    ### üîß Tecnologia:
                    - ü§ñ Claude Sonnet 4 (Anthropic)
                    - üêç Python + Streamlit
                    - üìä Interface responsiva
                    - üîí API keys protegidas
                    """)
                    
            # Inicializar cliente
            client = init_anthropic_client()
            if not client:
                st.stop()
            
            # Informa√ß√µes adicionais
            st.sidebar.markdown("---")
            st.sidebar.markdown("### ‚ÑπÔ∏è Informa√ß√µes")
            st.sidebar.info(
                "Este gerador utiliza intelig√™ncia artificial para criar quest√µes "
                "baseadas no padr√£o e contexto das provas da UERJ. "
                "As quest√µes s√£o geradas com base nos t√≥picos selecionados."
            )
        
        with tab2:
            exibir_graficos()
            return  # Importante: return aqui para n√£o executar o resto da fun√ß√£o

    def exibir_graficos():
        """Exibe p√°gina com gr√°ficos interativos de an√°lise das quest√µes UERJ"""
        st.title("üìä An√°lise Estat√≠stica - Quest√µes de Qu√≠mica UERJ")
        st.markdown("*Visualiza√ß√£o interativa da evolu√ß√£o dos temas ao longo dos anos (2013-2025)*")
        
        # Carregar dados CSV no Python
        try:
            df = pd.read_csv('gr√°ficos.csv')
            st.success("‚úÖ Arquivo de dados carregado com sucesso!")
            
            # Converter dados para JSON para passar ao JavaScript
            dados_json = df.to_json(orient='records')
            
            # Embed do gr√°fico HTML com dados embutidos
            components.html(f"""
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>An√°lise de Quest√µes de Qu√≠mica UERJ</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 20px;
                background-color: #f5f5f5;
            }}
            .container {{
                max-width: 1200px;
                margin: 0 auto;
                background-color: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }}
            .title {{
                text-align: center;
                color: #2c3e50;
                margin-bottom: 30px;
            }}
            .controls {{
                margin-bottom: 20px;
                padding: 20px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
            }}
            .control-group {{
                margin-bottom: 15px;
            }}
            label {{
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #495057;
            }}
            select {{
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                font-size: 14px;
                background-color: white;
            }}
            .chart-container {{
                width: 100%;
                height: 600px;
                margin-top: 20px;
            }}
            .info-box {{
                background-color: #e3f2fd;
                border-left: 4px solid #2196f3;
                padding: 15px;
                margin-bottom: 20px;
                border-radius: 4px;
            }}
            .filter-options {{
                display: flex;
                gap: 15px;
                flex-wrap: wrap;
            }}
            .filter-options > div {{
                flex: 1;
                min-width: 200px;
            }}
            .metrics {{
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
                flex-wrap: wrap;
            }}
            .metric-card {{
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #dee2e6;
                flex: 1;
                min-width: 150px;
                text-align: center;
            }}
            .metric-value {{
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
            }}
            .metric-label {{
                font-size: 12px;
                color: #6c757d;
                margin-top: 5px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="title">An√°lise de Quest√µes de Qu√≠mica - UERJ (2013-2025)</h1>
            
            <div class="info-box">
                <strong>Como usar:</strong> Selecione um tema, subtema ou t√≥pico espec√≠fico para visualizar sua evolu√ß√£o ao longo dos anos. 
                Passe o mouse sobre os pontos do gr√°fico para ver informa√ß√µes detalhadas.
            </div>

            <div class="controls">
                <div class="filter-options">
                    <div class="control-group">
                        <label for="tipoSelect">Tipo:</label>
                        <select id="tipoSelect">
                            <option value="">Todos</option>
                            <option value="Tema">Tema</option>
                            <option value="Sub-tema">Sub-tema</option>
                            <option value="T√≥pico">T√≥pico</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label for="itemSelect">Item:</label>
                        <select id="itemSelect">
                            <option value="">Selecione um item</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="metrics" id="metricsContainer" style="display: none;">
                <div class="metric-card">
                    <div class="metric-value" id="totalQuestoes">0</div>
                    <div class="metric-label">Total de Quest√µes</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="participacaoTotal">0%</div>
                    <div class="metric-label">Participa√ß√£o Total</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="mediaAnual">0</div>
                    <div class="metric-label">M√©dia Anual</div>
                </div>
            </div>

            <div class="chart-container" id="chartContainer"></div>
        </div>

        <script>
            // Dados carregados do Python
            const data = {dados_json};
            let totalQuestoesPorAno = {{}};

            // Fun√ß√£o para processar dados
            function processData() {{
                try {{
                    // Calcular total de quest√µes por ano
                    const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                    anos.forEach(ano => {{
                        totalQuestoesPorAno[ano] = data.reduce((sum, row) => sum + (row[ano] || 0), 0);
                    }});

            // ADI√á√ÉO: Calcular totais por tipo e ano para participa√ß√£o percentual correta
            window.totaisPorTipoEAno = {{}};
            anos.forEach(ano => {{
                window.totaisPorTipoEAno[ano] = {{
                    'Tema': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'Tema')
                            .reduce((sum, row) => sum + (row[ano] || 0), 0),
                    'Sub-tema': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'Sub-tema')
                                .reduce((sum, row) => sum + (row[ano] || 0), 0),
                    'T√≥pico': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'T√≥pico')
                                .reduce((sum, row) => sum + (row[ano] || 0), 0)
                }};
            }});

                    populateFilters();
                    
                }} catch (error) {{
                    console.error('Erro ao processar dados:', error);
                    document.getElementById('chartContainer').innerHTML = '<p style="text-align: center; color: red;">Erro ao processar os dados.</p>';
                }}
            }}

            // Fun√ß√£o para popular os filtros
            function populateFilters() {{
                const tipoSelect = document.getElementById('tipoSelect');
                const itemSelect = document.getElementById('itemSelect');

                // Debug: verificar estrutura dos dados
                console.log('Dados carregados:', data);
                console.log('Primeira linha:', data[0]);

                // Limpar op√ß√µes anteriores
                itemSelect.innerHTML = '<option value="">Selecione um item</option>';

                // Listener para mudan√ßa de tipo
                tipoSelect.addEventListener('change', function() {{
                    const tipoSelecionado = this.value;
                    console.log('Tipo selecionado:', tipoSelecionado);
                    
                    itemSelect.innerHTML = '<option value="">Selecione um item</option>';

                    if (tipoSelecionado) {{
                        const itensFiltrados = data.filter(row => row['Tema/Subtema/T√≥pico'] === tipoSelecionado);
                        console.log('Itens filtrados:', itensFiltrados);
                        
                        itensFiltrados.forEach(item => {{
                            const option = document.createElement('option');
                            option.value = item['√çndice'];
                            option.textContent = item['T√≠tulo'];
                            itemSelect.appendChild(option);
                        }});
                    }} else {{
                        // Mostrar todos os itens
                        data.forEach(item => {{
                            const option = document.createElement('option');
                            option.value = item['√çndice'];
                            option.textContent = `[${{item['Tema/Subtema/T√≥pico']}}] ${{item['T√≠tulo']}}`;
                            itemSelect.appendChild(option);
                        }});
                    }}
                }});
        
                // Listener para mudan√ßa de item
                itemSelect.addEventListener('change', function() {{
                    const indiceSelecionado = this.value;
                    if (indiceSelecionado) {{
                        const itemSelecionado = data.find(row => row['√çndice'].toString() === indiceSelecionado);
                        if (itemSelecionado) {{
                            updateChart(itemSelecionado);
                            updateMetrics(itemSelecionado);
                        }}
                    }} else {{
                        document.getElementById('chartContainer').innerHTML = '';
                        document.getElementById('metricsContainer').style.display = 'none';
                    }}
                }});

                // Disparar evento para popular itens inicialmente
                tipoSelect.dispatchEvent(new Event('change'));
            }}

            // Fun√ß√£o para atualizar m√©tricas
            function updateMetrics(item) {{
                const metricsContainer = document.getElementById('metricsContainer');
                const totalQuestoes = document.getElementById('totalQuestoes');
                const participacaoTotal = document.getElementById('participacaoTotal');
                const mediaAnual = document.getElementById('mediaAnual');

                const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                const totalAnual = anos.reduce((sum, ano) => sum + (item[ano] || 0), 0);
                const media = totalAnual / anos.length;

                totalQuestoes.textContent = item['Contagem Total'] || 0;
                participacaoTotal.textContent = ((item['Participa√ß√£o Total'] || 0) * 100).toFixed(1) + '%';
                mediaAnual.textContent = media.toFixed(1);

                metricsContainer.style.display = 'flex';
            }}

            // Fun√ß√£o para atualizar o gr√°fico
            function updateChart(item) {{
                const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                
                const questoesPorAno = anos.map(ano => item[ano] || 0);
                
                // ALTERA√á√ÉO: Calcular participa√ß√£o percentual baseada no tipo do item
                const participacaoAnual = anos.map(ano => {{
                    const questoes = item[ano] || 0;
                    const tipoItem = item['Tema/Subtema/T√≥pico'];
                    const totalDoTipo = window.totaisPorTipoEAno[ano][tipoItem] || 1;
                    return questoes === 0 ? 0 : (questoes / totalDoTipo * 100);
                }});

                // Criar texto para hover
                const hoverText = anos.map((ano, index) => {{
                    const tipoItem = item['Tema/Subtema/T√≥pico'];
                    const totalDoTipo = window.totaisPorTipoEAno[ano][tipoItem] || 0;
                    
                    return `<b>${{ano}}</b><br>` +
                        `Quest√µes: ${{questoesPorAno[index]}}<br>` +
                        `Participa√ß√£o: ${{participacaoAnual[index].toFixed(1)}}%<br>` +
                        `Total de ${{tipoItem.toLowerCase()}}s: ${{totalDoTipo}}<br>` +
                        `<b>Dados Gerais:</b><br>` +
                        `Total geral: ${{item['Contagem Total']}}<br>` +
                        `Participa√ß√£o total: ${{((item['Participa√ß√£o Total'] || 0) * 100).toFixed(1)}}%`;
                }});

                const trace = {{
                    x: anos,
                    y: participacaoAnual,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Participa√ß√£o % por Ano',
                    line: {{
                        color: '#2196f3',
                        width: 3
                    }},
                    marker: {{
                        size: 8,
                        color: '#1976d2',
                        line: {{
                            color: '#0d47a1',
                            width: 2
                        }}
                    }},
                    hovertemplate: '%{{text}}<extra></extra>',
                    text: hoverText
                }};

                const layout = {{
                    title: {{
                        text: `<b>${{item['T√≠tulo']}}</b><br><sub>[${{item['Tema/Subtema/T√≥pico']}}]</sub>`,
                        font: {{
                            size: 16
                        }}
                    }},
                    xaxis: {{
                        title: 'Ano',
                        showgrid: true,
                        gridcolor: '#e0e0e0'
                    }},
                    yaxis: {{
                        title: 'Participa√ß√£o (%)',
                        showgrid: true,
                        gridcolor: '#e0e0e0'
                    }},
                    plot_bgcolor: '#fafafa',
                    paper_bgcolor: 'white',
                    hovermode: 'x unified',
                    margin: {{
                        l: 60,
                        r: 40,
                        t: 80,
                        b: 60
                    }}
                }};

                const config = {{
                    responsive: true,
                    displayModeBar: true,
                    modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d', 'autoScale2d'],
                    displaylogo: false
                }};

                Plotly.newPlot('chartContainer', [trace], layout, config);
            }}

                    

            // Inicializar aplica√ß√£o
            window.addEventListener('load', processData);
        </script>
    </body>
    </html>
            """, height=800, scrolling=True)
            
            # Se√ß√£o de download no final da p√°gina
            st.markdown("---")
            st.markdown("### üì• Download dos Dados")
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                try:
                    # Verificar se o arquivo Excel existe
                    if os.path.exists('gr√°ficos.xlsx'):
                        with open('gr√°ficos.xlsx', 'rb') as file:
                            excel_data = file.read()
                        
                        st.download_button(
                            label="üìä Baixar gr√°ficos.xlsx",
                            data=excel_data,
                            file_name="graficos_uerj_quimica.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            help="Baixar arquivo Excel com todos os dados estat√≠sticos",
                            use_container_width=True
                        )
                    else:
                        # Se n√£o existir arquivo Excel, criar a partir do CSV
                        df_excel = pd.read_csv('gr√°ficos.csv')
                        buffer = BytesIO()
                        df_excel.to_excel(buffer, index=False, engine='openpyxl')
                        excel_data = buffer.getvalue()
                        
                        st.download_button(
                            label="üìä Baixar dados em Excel",
                            data=excel_data,
                            file_name="graficos_uerj_quimica.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            help="Baixar arquivo Excel gerado a partir dos dados CSV",
                            use_container_width=True
                        )
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao preparar download: {str(e)}")
                    st.info("üìã Verifique se o arquivo est√° dispon√≠vel ou tente novamente.")
                
        except FileNotFoundError:
            st.error("‚ùå Arquivo 'gr√°ficos.csv' n√£o encontrado!")
            st.info("üìÅ Certifique-se de que o arquivo 'gr√°ficos.csv' est√° na mesma pasta do aplicativo.")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
            st.info("üìã Verifique o formato do arquivo CSV e tente novamente.")        


    if __name__ == "__main__":
        main()
        
    
#########################################################################################################################
#########################################################################################################################
#########################################################################################################################
#########################################################################################################################
#########################################################################################################################
#########################################################################################################################

if st.session_state.selected_option == "Biologia":

    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="Gerador de Quest√µes Discursivas UERJ - Biologia",
        page_icon="üß¨",
        layout="wide"
    )

    # Fun√ß√£o para inicializar o cliente Anthropic
    @st.cache_resource
    def init_anthropic_client():
        try:
            api_key = st.secrets["ANTHROPIC_API_KEY"]
            return anthropic.Anthropic(api_key=api_key)
        except Exception as e:
            st.error(f"Erro ao inicializar cliente Anthropic: {e}")
            st.error("Verifique se a chave ANTHROPIC_API_KEY est√° configurada nos secrets do Streamlit.")
            return None

    @st.cache_data
    def carregar_contexto_arquivo(topico_id):
        """Carrega o contexto de um arquivo .txt espec√≠fico"""
        # Mapeamento de t√≥pico para nome do arquivo
        mapeamento_arquivos = {
            "1.1.1": "Bio_1.1.1 - Biodiversidade - caracter√≠sticas gerais dos principais grupos de seres vivos; teorias e conceitos de evolu√ß√£o.txt",
            "1.2.1": "Bio_1.2.1 - Integra√ß√£o entre seres vivos e meio ambiente - ecossistemas, cadeia alimentar, ciclos biogeoqu√≠micos; polui√ß√£o e desequil√≠brio ecol√≥gico.txt",
            "1.3.1": "Bio_1.3.1 - A c√©lula - fun√ß√µes das estruturas e organelas; fases da divis√£o celular.txt",
            "1.4.1": "Bio_1.4.1 - As bases da gen√©tica - genes; c√≥digo gen√©tico; cromossomos; hereditariedade e doen√ßas heredit√°rias.txt",
            "1.5.1": "Bio_1.5.1 - Doen√ßas parasit√°rias - ciclos de vida de parasitas, modos de transmiss√£o; profilaxia.txt",
            "1.6.1": "Bio_1.6.1 - Sistemas vitais dos animais e vegetais - homeostase, digest√£o e absor√ß√£o dos alimentos; respira√ß√£o; circula√ß√£o; excre√ß√£o; metabolismo de carboidratos, de lip√≠dio.txt",
            "1.6.2": "Bio_1.6.2 - Sistemas vitais dos animais e vegetais - sistemas reprodutores; produ√ß√£o de √≥vulos e espermatozoides na reprodu√ß√£o humana; atua√ß√£o dos horm√¥nios sexuais.txt",
            "1.6.3": "Bio_1.6.3 - Sistemas vitais dos animais e vegetais - fotoss√≠ntese.txt"
        }
        
        nome_arquivo = mapeamento_arquivos.get(topico_id)
        if nome_arquivo:
            try:
                with open(nome_arquivo, 'r', encoding='utf-8') as file:
                    conteudo = file.read()
                    return conteudo
            except FileNotFoundError:
                st.warning(f"‚ö†Ô∏è Arquivo {nome_arquivo} n√£o encontrado. Usando contexto padr√£o.")
                return None
            except Exception as e:
                st.error(f"‚ùå Erro ao ler arquivo {nome_arquivo}: {str(e)}")
                return None
        return None




    # Estrutura hier√°rquica dos temas
    ESTRUTURA_TEMAS = {
        "1.": {
            "titulo": "Os seres vivos e sua rela√ß√£o com o ambiente",
            "subtemas": {
                "1.1": {
                    "titulo": "Biodiversidade",
                    "topicos": {
                        "1.1.1": "Biodiversidade - caracter√≠sticas gerais dos principais grupos de seres vivos; teorias e conceitos de evolu√ß√£o"
                    }
                },
                "1.2": {
                    "titulo": "Integra√ß√£o entre seres vivos e meio ambiente",
                    "topicos": {
                        "1.2.1": "Integra√ß√£o entre seres vivos e meio ambiente - ecossistemas, cadeia alimentar, ciclos biogeoqu√≠micos; polui√ß√£o e desequil√≠brio ecol√≥gico"
                    }
                },
                "1.3": {
                    "titulo": "A c√©lula",
                    "topicos": {
                        "1.3.1": "A c√©lula - fun√ß√µes das estruturas e organelas; fases da divis√£o celular"
                    }
                },
                "1.4": {
                    "titulo": "As bases da gen√©tica",
                    "topicos": {
                        "1.4.1": "As bases da gen√©tica - genes; c√≥digo gen√©tico; cromossomos; hereditariedade e doen√ßas heredit√°rias"
                    }
                },
                "1.5": {
                    "titulo": "Doen√ßas parasit√°rias",
                    "topicos": {
                        "1.5.1": "Doen√ßas parasit√°rias - ciclos de vida de parasitas, modos de transmiss√£o; profilaxia"
                    }
                },
                "1.6": {
                    "titulo": "Sistemas vitais dos animais e vegetais",
                    "topicos": {
                        "1.6.1": "Sistemas vitais dos animais e vegetais - homeostase, digest√£o e absor√ß√£o dos alimentos; respira√ß√£o; circula√ß√£o; excre√ß√£o; metabolismo de carboidratos, de lip√≠dios e de prote√≠nas; fun√ß√µes dos horm√¥nios no metabolismo",
                        "1.6.2": "Sistemas vitais dos animais e vegetais - sistemas reprodutores; produ√ß√£o de √≥vulos e espermatozoides na reprodu√ß√£o humana; atua√ß√£o dos horm√¥nios sexuais",
                        "1.6.3": "Sistemas vitais dos animais e vegetais - fotoss√≠ntese"
                    }
                }
            }
        }
    }

    # Contextos espec√≠ficos para os t√≥picos dispon√≠veis
    CONTEXTOS_TOPICOS = {
        "1.1.1": """
    ## CONTEXTO: Biodiversidade - caracter√≠sticas gerais dos principais grupos de seres vivos; teorias e conceitos de evolu√ß√£o (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Caracter√≠sticas gerais dos principais grupos de seres vivos - classifica√ß√£o taxon√¥mica
    - Diversidade biol√≥gica e import√¢ncia ecol√≥gica
    - Teorias evolutivas - Darwin, Lamarck, teorias modernas
    - Conceitos de evolu√ß√£o - sele√ß√£o natural, adapta√ß√£o, especia√ß√£o
    - Evid√™ncias evolutivas - registro f√≥ssil, anatomia comparada, embriologia
    - Evolu√ß√£o molecular e filogen√©tica
    - Biodiversidade e conserva√ß√£o
    - Endemismo e distribui√ß√£o geogr√°fica das esp√©cies
    - Fatores que influenciam a biodiversidade
    - Impactos humanos na biodiversidade

    Exemplos de quest√µes discursivas incluem:
    - Classifica√ß√£o taxon√¥mica de grupos espec√≠ficos
    - An√°lise de caracter√≠sticas evolutivas adaptativas
    - Compara√ß√£o entre diferentes teorias evolutivas
    - Interpreta√ß√£o de √°rvores filogen√©ticas
    - Impactos da a√ß√£o humana na biodiversidade
    - Estrat√©gias de conserva√ß√£o da biodiversidade
    """,
        "1.2.1": """
    ## CONTEXTO: Integra√ß√£o entre seres vivos e meio ambiente - ecossistemas, cadeia alimentar, ciclos biogeoqu√≠micos; polui√ß√£o e desequil√≠brio ecol√≥gico (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Estrutura e funcionamento dos ecossistemas - componentes bi√≥ticos e abi√≥ticos
    - Cadeias e teias alimentares - fluxo de energia e mat√©ria
    - N√≠veis tr√≥ficos e pir√¢mides ecol√≥gicas
    - Ciclos biogeoqu√≠micos - carbono, nitrog√™nio, f√≥sforo, √°gua
    - Fatores limitantes e capacidade de suporte
    - Sucess√£o ecol√≥gica prim√°ria e secund√°ria
    - Polui√ß√£o ambiental e seus efeitos nos ecossistemas
    - Desequil√≠brio ecol√≥gico e suas consequ√™ncias
    - Mudan√ßas clim√°ticas e impactos ambientais
    - Desenvolvimento sustent√°vel e conserva√ß√£o

    Exemplos de quest√µes discursivas incluem:
    - An√°lise de cadeias alimentares complexas
    - Interpreta√ß√£o de ciclos biogeoqu√≠micos
    - Efeitos da polui√ß√£o em ecossistemas espec√≠ficos
    - Sucess√£o ecol√≥gica em diferentes ambientes
    - Impactos das mudan√ßas clim√°ticas
    - Estrat√©gias de manejo ambiental
    """,
        "1.3.1": """
    ## CONTEXTO: A c√©lula - fun√ß√µes das estruturas e organelas; fases da divis√£o celular (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Estrutura celular - membrana plasm√°tica, citoplasma, n√∫cleo
    - Organelas celulares e suas fun√ß√µes espec√≠ficas
    - Diferen√ßas entre c√©lulas procari√≥ticas e eucari√≥ticas
    - Diferen√ßas entre c√©lulas animais e vegetais
    - Processos de transporte atrav√©s da membrana
    - Metabolismo celular - respira√ß√£o, fotoss√≠ntese, fermenta√ß√£o
    - Ciclo celular e sua regula√ß√£o
    - Fases da mitose e sua import√¢ncia
    - Fases da meiose e variabilidade gen√©tica
    - Controle do ciclo celular e c√¢ncer

    Exemplos de quest√µes discursivas incluem:
    - Compara√ß√£o entre diferentes tipos celulares
    - An√°lise de processos metab√≥licos celulares
    - Interpreta√ß√£o de experimentos sobre divis√£o celular
    - Rela√ß√£o entre estrutura e fun√ß√£o de organelas
    - Mecanismos de regula√ß√£o do ciclo celular
    - Import√¢ncia da divis√£o celular para os organismos
    """,
        "1.4.1": """
    ## CONTEXTO: As bases da gen√©tica - genes; c√≥digo gen√©tico; cromossomos; hereditariedade e doen√ßas heredit√°rias (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Conceitos b√°sicos de gen√©tica - genes, alelos, gen√≥tipo, fen√≥tipo
    - Estrutura e organiza√ß√£o dos cromossomos
    - C√≥digo gen√©tico e s√≠ntese de prote√≠nas
    - Leis de Mendel e padr√µes de heran√ßa
    - Heran√ßa ligada ao sexo e heran√ßa quantitativa
    - Muta√ß√µes g√™nicas e cromoss√¥micas
    - Doen√ßas gen√©ticas e heredit√°rias
    - Aconselhamento gen√©tico e diagn√≥stico
    - Biotecnologia e engenharia gen√©tica
    - Terapia g√™nica e medicina personalizada

    Exemplos de quest√µes discursivas incluem:
    - Resolu√ß√£o de problemas de gen√©tica mendeliana
    - An√°lise de heredogramas e padr√µes de heran√ßa
    - Interpreta√ß√£o de experimentos gen√©ticos
    - Rela√ß√£o entre gen√≥tipo e fen√≥tipo
    - Mecanismos de origem de doen√ßas gen√©ticas
    - Aplica√ß√µes da biotecnologia na medicina
    """,
        "1.5.1": """
    ## CONTEXTO: Doen√ßas parasit√°rias - ciclos de vida de parasitas, modos de transmiss√£o; profilaxia (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Principais grupos de parasitas - protozo√°rios, helmintos, artr√≥podes
    - Ciclos de vida complexos dos parasitas
    - Modos de transmiss√£o - vetores, hospedeiros intermedi√°rios
    - Doen√ßas parasit√°rias no Brasil - mal√°ria, dengue, esquistossomose
    - Sintomas e diagn√≥stico de doen√ßas parasit√°rias
    - Medidas profil√°ticas e controle de vetores
    - Tratamento de doen√ßas parasit√°rias
    - Epidemiologia e sa√∫de p√∫blica
    - Fatores socioecon√¥micos e doen√ßas parasit√°rias
    - Impactos ambientais no ciclo dos parasitas

    Exemplos de quest√µes discursivas incluem:
    - An√°lise de ciclos de vida de parasitas espec√≠ficos
    - Estrat√©gias de controle e preven√ß√£o
    - Interpreta√ß√£o de dados epidemiol√≥gicos
    - Rela√ß√£o entre condi√ß√µes ambientais e parasitoses
    - Medidas de sa√∫de p√∫blica para controle
    - Diagn√≥stico diferencial de doen√ßas parasit√°rias
    """,
        "1.6.1": """
    ## CONTEXTO: Sistemas vitais dos animais e vegetais - homeostase, digest√£o e absor√ß√£o dos alimentos; respira√ß√£o; circula√ß√£o; excre√ß√£o; metabolismo de carboidratos, de lip√≠dios e de prote√≠nas; fun√ß√µes dos horm√¥nios no metabolismo (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Homeostase e mecanismos de regula√ß√£o
    - Sistema digest√≥rio - digest√£o e absor√ß√£o
    - Sistema respirat√≥rio - trocas gasosas
    - Sistema circulat√≥rio - transporte de subst√¢ncias
    - Sistema excretor - elimina√ß√£o de res√≠duos
    - Metabolismo de carboidratos, lip√≠dios e prote√≠nas
    - Regula√ß√£o hormonal do metabolismo
    - Integra√ß√£o entre sistemas org√¢nicos
    - Adapta√ß√µes fisiol√≥gicas em diferentes ambientes
    - Dist√∫rbios metab√≥licos e doen√ßas

    Exemplos de quest√µes discursivas incluem:
    - An√°lise de processos fisiol√≥gicos integrados
    - Mecanismos de controle homeost√°tico
    - Interpreta√ß√£o de experimentos fisiol√≥gicos
    - Rela√ß√£o entre estrutura e fun√ß√£o em √≥rg√£os
    - Regula√ß√£o hormonal de processos metab√≥licos
    - Adapta√ß√µes fisiol√≥gicas em diferentes organismos
    """,
        "1.6.2": """
    ## CONTEXTO: Sistemas vitais dos animais e vegetais - sistemas reprodutores; produ√ß√£o de √≥vulos e espermatozoides na reprodu√ß√£o humana; atua√ß√£o dos horm√¥nios sexuais (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Sistemas reprodutores masculino e feminino
    - Gametog√™nese - espermatog√™nese e ovog√™nese
    - Ciclo menstrual e regula√ß√£o hormonal
    - Fecunda√ß√£o e desenvolvimento embrion√°rio
    - Horm√¥nios sexuais e suas fun√ß√µes
    - M√©todos contraceptivos e planejamento familiar
    - Reprodu√ß√£o assistida e biotecnologia reprodutiva
    - Doen√ßas sexualmente transmiss√≠veis
    - Puberdade e desenvolvimento sexual
    - Menopausa e andropausa

    Exemplos de quest√µes discursivas incluem:
    - An√°lise do ciclo menstrual e regula√ß√£o hormonal
    - Processos de gametog√™nese e matura√ß√£o
    - Mecanismos de a√ß√£o de m√©todos contraceptivos
    - T√©cnicas de reprodu√ß√£o assistida
    - Interpreta√ß√£o de dados sobre fertilidade
    - Preven√ß√£o de doen√ßas sexualmente transmiss√≠veis
    """,
        "1.6.3": """
    ## CONTEXTO: Sistemas vitais dos animais e vegetais - fotoss√≠ntese (QUEST√ïES DISCURSIVAS)

    Baseado nas quest√µes discursivas de vestibulares UERJ, este t√≥pico aborda:
    - Processo fotossint√©tico - fase clara e fase escura
    - Estrutura dos cloroplastos e pigmentos fotossint√©ticos
    - Fatores que influenciam a fotoss√≠ntese
    - Fotoss√≠ntese e respira√ß√£o celular - rela√ß√£o e diferen√ßas
    - Import√¢ncia ecol√≥gica da fotoss√≠ntese
    - Plantas C3, C4 e CAM - adapta√ß√µes fotossint√©ticas
    - Fotoss√≠ntese artificial e biotecnologia
    - Mudan√ßas clim√°ticas e fotoss√≠ntese
    - Efici√™ncia fotossint√©tica e produtividade
    - Fotoss√≠ntese em diferentes ambientes

    Exemplos de quest√µes discursivas incluem:
    - An√°lise experimental da fotoss√≠ntese
    - Fatores limitantes do processo fotossint√©tico
    - Adapta√ß√µes fotossint√©ticas em diferentes plantas
    - Rela√ß√£o entre fotoss√≠ntese e respira√ß√£o
    - Import√¢ncia da fotoss√≠ntese nos ecossistemas
    - Aplica√ß√µes biotecnol√≥gicas da fotoss√≠ntese
    """
    }

    def get_contexto_completo(topico_id):
        """Retorna o contexto completo para um t√≥pico espec√≠fico"""
        # Primeiro tenta carregar do arquivo .txt
        contexto_arquivo = carregar_contexto_arquivo(topico_id)
        
        if contexto_arquivo:
            # Se arquivo foi carregado com sucesso, usa seu conte√∫do
            return contexto_arquivo
        else:
            # Fallback para contexto hardcoded se arquivo n√£o existir
            contexto_base = CONTEXTOS_TOPICOS.get(topico_id, "")
            
            # Adiciona exemplos de quest√µes baseados nos t√≥picos de biologia
            if topico_id in ["1.1.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Classifica√ß√£o taxon√¥mica e caracter√≠sticas evolutivas
    - Teorias evolutivas e evid√™ncias cient√≠ficas
    - Biodiversidade e conserva√ß√£o ambiental
    - Adapta√ß√µes evolutivas e sele√ß√£o natural
    - Impactos humanos na biodiversidade
    """
            elif topico_id in ["1.2.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - An√°lise de cadeias alimentares e fluxo de energia
    - Ciclos biogeoqu√≠micos e equil√≠brio ambiental
    - Polui√ß√£o e desequil√≠brio ecol√≥gico
    - Sucess√£o ecol√≥gica e regenera√ß√£o ambiental
    - Mudan√ßas clim√°ticas e impactos nos ecossistemas
    """
            elif topico_id in ["1.3.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Estrutura e fun√ß√£o de organelas celulares
    - Processos de divis√£o celular e regula√ß√£o
    - Diferen√ßas entre tipos celulares
    - Metabolismo celular e energia
    - Ciclo celular e controle da prolifera√ß√£o
    """
            elif topico_id in ["1.4.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Gen√©tica mendeliana e padr√µes de heran√ßa
    - An√°lise de heredogramas e aconselhamento gen√©tico
    - Doen√ßas gen√©ticas e muta√ß√µes
    - Biotecnologia e engenharia gen√©tica
    - C√≥digo gen√©tico e s√≠ntese de prote√≠nas
    """
            elif topico_id in ["1.5.1"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Ciclos de vida de parasitas e vetores
    - Doen√ßas parasit√°rias e epidemiologia
    - Medidas profil√°ticas e controle de vetores
    - Diagn√≥stico e tratamento de parasitoses
    - Sa√∫de p√∫blica e doen√ßas tropicais
    """
            elif topico_id in ["1.6.1", "1.6.2", "1.6.3"]:
                contexto_base += """

    ### EXEMPLOS DE QUEST√ïES DETALHADAS:
    - Fisiologia dos sistemas org√¢nicos
    - Homeostase e regula√ß√£o hormonal
    - Processos reprodutivos e desenvolvimento
    - Fotoss√≠ntese e metabolismo energ√©tico
    - Integra√ß√£o entre sistemas biol√≥gicos
    """
            
            return contexto_base

    def gerar_questao(client, tema, subtema, topico, num_questoes, dificuldade):
        """Gera quest√µes discursivas usando a API do Claude"""
        
        contexto_topico = get_contexto_completo(topico.split(' ', 1)[0] if ' ' in topico else topico)
        
        prompt = f"""
    Como professor experiente de Biologia da UERJ, elabore EXATAMENTE {num_questoes} quest√£o(√µes) discursiva(s) original(is) sobre o t√≥pico:

    **TEMA:** {tema}
    **SUBTEMA:** {subtema}  
    **T√ìPICO:** {topico}

    **CONTEXTO DO T√ìPICO:**
    {contexto_topico}

    **INSTRU√á√ïES ESPEC√çFICAS:**
    1. Crie APENAS quest√µes DISCURSIVAS no estilo UERJ (contextualizada, interdisciplinar quando poss√≠vel)
    2. Dificuldade: {dificuldade}
    3. Inclua dados necess√°rios, tabelas ou gr√°ficos quando apropriado
    4. As quest√µes devem ser claras, bem estruturadas e desafiadoras
    5. N√ÉO use alternativas de m√∫ltipla escolha - apenas quest√µes abertas
    6. Use contextos reais e aplica√ß√µes pr√°ticas
    7. Inclua c√°lculos quando necess√°rio
    8. Mantenha consist√™ncia com o padr√£o UERJ de quest√µes discursivas

    **CARACTER√çSTICAS DAS QUEST√ïES DISCURSIVAS UERJ:**
    - Contextualiza√ß√£o com situa√ß√µes reais e atuais
    - Interdisciplinaridade quando poss√≠vel
    - M√∫ltiplas habilidades em uma quest√£o
    - Dados experimentais ou situa√ß√µes pr√°ticas
    - Aplica√ß√£o de conceitos te√≥ricos em contextos reais
    - Respostas que exigem desenvolvimento, explica√ß√£o e justificativa
    - Quest√µes que avaliam capacidade de an√°lise e s√≠ntese

    **FORMATO OBRIGAT√ìRIO DE RESPOSTA:**
    Para cada quest√£o, forne√ßa EXATAMENTE:

    """ + "\n".join([f"""
    ### QUEST√ÉO {i}
    [Enunciado completo com contexto rico e situa√ß√£o real]

    [Dados, tabelas ou informa√ß√µes complementares se necess√°rio]

    **O que se pede:**
    a) [Primeira pergunta discursiva]
    b) [Segunda pergunta discursiva]
    c) [Terceira pergunta discursiva - se aplic√°vel]""" for i in range(1, num_questoes + 1)]) + f"""

    """ + "\n".join([f"""
    ### GABARITO E SOLU√á√ÉO DETALHADA {i}
    **Solu√ß√£o completa:**

    **Item a)**
    [Resposta esperada detalhada]
    [Desenvolvimento passo a passo]
    [C√°lculos quando necess√°rio]

    **Item b)**
    [Resposta esperada detalhada]
    [Desenvolvimento passo a passo]
    [Justificativas te√≥ricas]

    **Item c)** (se aplic√°vel)
    [Resposta esperada detalhada]
    [Explica√ß√µes conceituais]

    **Conceitos envolvidos:**
    - [conceito biol√≥gico 1]
    - [conceito biol√≥gico 2]
    - [conceito biol√≥gico 3]
    - [aplica√ß√µes pr√°ticas]""" for i in range(1, num_questoes + 1)]) + f"""

    ---

    IMPORTANTE: Gere EXATAMENTE {num_questoes} quest√£o(√µes) discursiva(s) agora, seguindo rigorosamente este formato. N√ÉO inclua alternativas de m√∫ltipla escolha."""

        try:
            response = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                temperature=0.7,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
                    
            return response.content[0].text
        except Exception as e:
            st.error(f"Erro detalhado: {str(e)}")
            return f"‚ùå **Erro ao gerar quest√£o**\n\nDetalhes t√©cnicos: {str(e)}"

    def main():
        st.title("üß¨ Gerador de Quest√µes Discursivas UERJ - Biologia")
        st.markdown("*Sistema inteligente para cria√ß√£o de quest√µes discursivas de vestibular baseado no padr√£o UERJ*")

        # Sistema de navega√ß√£o
        tab1, tab2 = st.tabs(["üöÄ Gerador de Quest√µes", "üìä An√°lise Estat√≠stica"])
        
        with tab1:
            # Inicializar cliente
            client = init_anthropic_client()
            if not client:
                st.stop()
            
            # CSS personalizado para melhorar apar√™ncia
            st.markdown("""
            <style>
            .stSelectbox > div > div > select {
                background-color: #f0f2f6;
            }
            .success-box {
                padding: 1rem;
                border-radius: 0.5rem;
                background-color: #d4edda;
                border: 1px solid #c3e6cb;
                color: #155724;
                margin: 1rem 0;
            }
            .info-card {
                padding: 1.5rem;
                border-radius: 0.5rem;
                background-color: #e3f2fd;
                border-left: 4px solid #2196f3;
                margin: 1rem 0;
            }
            </style>
            """, unsafe_allow_html=True)
            
            # Sidebar para sele√ß√£o
            st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
            
            # Sele√ß√£o do tema
            temas_opcoes = {f"{k} {v['titulo']}": k for k, v in ESTRUTURA_TEMAS.items()}
            tema_selecionado = st.sidebar.selectbox(
                "üìö Selecione o Tema:",
                list(temas_opcoes.keys()),
                help="Escolha o tema principal do conte√∫do"
            )
            tema_id = temas_opcoes[tema_selecionado]
            
            # Sele√ß√£o do subtema
            subtemas_disponiveis = ESTRUTURA_TEMAS[tema_id]["subtemas"]
            subtemas_opcoes = {f"{k} {v['titulo']}": k for k, v in subtemas_disponiveis.items()}
            subtema_selecionado = st.sidebar.selectbox(
                "üìñ Selecione o Subtema:",
                list(subtemas_opcoes.keys()),
                help="Escolha o subtema espec√≠fico"
            )
            subtema_id = subtemas_opcoes[subtema_selecionado]
            
            # Sele√ß√£o do t√≥pico
            topicos_disponiveis = subtemas_disponiveis[subtema_id]["topicos"]
            if topicos_disponiveis:
                topicos_opcoes = {f"{k} {v}": k for k, v in topicos_disponiveis.items()}
                topico_selecionado = st.sidebar.selectbox(
                    "üìù Selecione o T√≥pico:",
                    list(topicos_opcoes.keys()),
                    help="Escolha o t√≥pico espec√≠fico para a quest√£o"
                )
                topico_id = topicos_opcoes[topico_selecionado]
                contexto_disponivel = topico_id in CONTEXTOS_TOPICOS
            else:
                st.sidebar.warning("‚ö†Ô∏è Este subtema n√£o possui t√≥picos espec√≠ficos dispon√≠veis.")
                topico_selecionado = subtema_selecionado
                topico_id = subtema_id
                contexto_disponivel = False
            
            # Indicador de contexto dispon√≠vel
            if contexto_disponivel:
                # Verificar se o contexto vem de arquivo ou √© hardcoded
                contexto_arquivo = carregar_contexto_arquivo(topico_id)
                if contexto_arquivo:
                    st.sidebar.success("‚úÖ Contexto especializado carregado do arquivo")
                else:
                    st.sidebar.success("‚úÖ Contexto especializado dispon√≠vel")
            else:
                st.sidebar.info("‚ÑπÔ∏è Usando contexto geral do subtema")
                    
            # Configura√ß√µes adicionais
            st.sidebar.markdown("### üéõÔ∏è Par√¢metros de Gera√ß√£o")
            
            # Sele√ß√£o do n√∫mero de quest√µes
            num_questoes = st.sidebar.slider("üî¢ N√∫mero de quest√µes:", 1, 5, 1)
            dificuldade = st.sidebar.selectbox(
                "üìä N√≠vel de dificuldade:",
                ["f√°cil", "m√©dia", "dif√≠cil"]
            )
                
            # Configura√ß√µes avan√ßadas
            with st.sidebar.expander("üîß Caracter√≠sticas das Quest√µes"):
                st.markdown("""
                ‚úÖ **Formato:** Apenas quest√µes discursivas  
                ‚úÖ **Estrutura:** Contexto + m√∫ltiplos itens  
                ‚úÖ **Estilo:** Padr√£o UERJ contextualizado  
                ‚úÖ **Quantidade:** Entre 1 e 5: o usu√°rio escolhe  
                ‚úÖ **C√°lculos:** Inclu√≠dos quando necess√°rio  
                ‚úÖ **Interdisciplinar:** Quando aplic√°vel  
                """)
            
            # Bot√£o para gerar quest√µes
            texto_botao = f"üöÄ Gerar {num_questoes} Quest√£o{'s' if num_questoes > 1 else ''} Discursiva{'s' if num_questoes > 1 else ''}"
            gerar_button = st.sidebar.button(texto_botao, type="primary", use_container_width=True)
                
            if gerar_button:
                # Valida√ß√µes
                if not client:
                    st.error("‚ùå Cliente Anthropic n√£o inicializado. Verifique a configura√ß√£o da API key.")
                    return
                    
                # Mostrar informa√ß√µes da sele√ß√£o
                st.markdown("### üìã Quest√µes Sendo Geradas:")
                
                # Verificar fonte do contexto
                contexto_arquivo = carregar_contexto_arquivo(topico_id) if contexto_disponivel else None
                fonte_contexto = "Arquivo especializado" if contexto_arquivo else ("Especializado" if contexto_disponivel else "Geral")
                
                st.markdown(f"""
                <div class="info-card">
                <strong>üìö Tema:</strong> {tema_selecionado}<br>
                <strong>üìñ Subtema:</strong> {subtema_selecionado}<br>
                <strong>üìù T√≥pico:</strong> {topico_selecionado}<br>
                <strong>üìä Dificuldade:</strong> {dificuldade.title()}<br>
                <strong>üéØ Contexto:</strong> {fonte_contexto}<br>
                <strong>üìÅ Fonte:</strong> {'Arquivo .txt' if contexto_arquivo else 'C√≥digo interno'}<br>
                <strong>üî¢ Quantidade:</strong> {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} discursiva{'s' if num_questoes > 1 else ''}<br>
                </div>
                """, unsafe_allow_html=True)
                        
                # Progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                with st.spinner("üîÑ Gerando quest√µes... Por favor, aguarde."):
                    status_text.text("ü§ñ Conectando com IA...")
                    progress_bar.progress(25)
                    
                    status_text.text(f"üìù Elaborando {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} discursiva{'s' if num_questoes > 1 else ''}...")

                    progress_bar.progress(50)
                    
                    resultado = gerar_questao(
                        client, 
                        tema_selecionado, 
                        subtema_selecionado, 
                        topico_selecionado,
                        num_questoes,
                        dificuldade
                    )
                    
                    status_text.text("‚úÖ Processando resultado...")
                    progress_bar.progress(75)
                    
                    progress_bar.progress(100)
                    status_text.text(f"üéâ {num_questoes} quest√£o{'√µes' if num_questoes > 1 else ''} gerada{'s' if num_questoes > 1 else ''} com sucesso!")

                
                # Limpar elementos de progresso ap√≥s um delay
                import time
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
                
                # Verificar se houve erro
                if resultado.startswith("‚ùå"):
                    st.error(resultado)
                    return
                
                # Exibir resultado
                st.markdown("---")
                st.markdown("## üìã Quest√µes Geradas")
                
                # Dividir o resultado em quest√µes e gabaritos
                partes = resultado.split("### GABARITO E SOLU√á√ÉO DETALHADA")
                
                if len(partes) > 1:
                    # Exibir quest√µes
                    questoes_parte = partes[0]
                    st.markdown(questoes_parte)
                    
                    # Bot√£o para download das quest√µes (futuro)
                    col1, col2, col3 = st.columns([1, 1, 1])
                    with col2:
                        st.markdown("""
                        <div class="success-box">
                        ‚úÖ Quest√µes geradas com sucesso! Use os expanders abaixo para ver as solu√ß√µes.
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # Exibir gabaritos em expanders
                    st.markdown("---")
                    st.markdown("## üîë Gabaritos e Solu√ß√µes Detalhadas")
                    st.markdown("*Clique nos cards abaixo para visualizar as solu√ß√µes completas*")
                    
                    for i in range(1, len(partes)):
                        gabarito_parte = "### GABARITO E SOLU√á√ÉO DETALHADA" + partes[i]
                        
                        # Extrair n√∫mero da quest√£o para o t√≠tulo do expander
                        linhas = gabarito_parte.split('\n')
                        titulo_questao = linhas[0].replace("### GABARITO E SOLU√á√ÉO DETALHADA", "Solu√ß√£o da Quest√£o") if linhas else f"Solu√ß√£o da Quest√£o {i}"
                        
                        with st.expander(f"üí° {titulo_questao}", expanded=False):
                            st.markdown(gabarito_parte)
                            
                            # Bot√µes de a√ß√£o para cada solu√ß√£o
                            col1, col2 = st.columns([1, 1])
                            with col1:
                                if st.button(f"üìã Copiar Quest√£o {i}", key=f"copy_{i}"):
                                    st.success("Funcionalidade de c√≥pia ser√° implementada!")
                            with col2:
                                if st.button(f"‚≠ê Favoritar {i}", key=f"fav_{i}"):
                                    st.success("Quest√£o favoritada!")
                else:
                    # Se n√£o conseguiu dividir, exibir tudo
                    st.markdown(resultado)
                    
                # Feedback do usu√°rio
                st.markdown("---")
                st.markdown("### üìù Feedback")
                col1, col2 = st.columns([1, 1])
                with col1:
                    rating = st.selectbox("Avalie a qualidade das quest√µes:", 
                                        ["Selecione...", "‚≠ê Ruim", "‚≠ê‚≠ê Regular", "‚≠ê‚≠ê‚≠ê Bom", "‚≠ê‚≠ê‚≠ê‚≠ê Muito Bom", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excelente"])
                with col2:
                    if st.button("üì§ Enviar Feedback"):
                        if rating != "Selecione...":
                            st.success("Obrigado pelo feedback!")
                        else:
                            st.warning("Por favor, selecione uma avalia√ß√£o.")
            
            # Informa√ß√µes adicionais na sidebar
            st.sidebar.markdown("---")
            st.sidebar.markdown("### ‚ÑπÔ∏è Informa√ß√µes do Sistema")
            st.sidebar.info(
                "ü§ñ **IA:** Claude Sonnet 4\n\n"
                "üìä **Base:** Quest√µes UERJ reais\n\n"
                "üìù **Formato:** Apenas discursivas\n\n"
                "üî¢ **Quantidade:** 1-5 quest√µes/gera√ß√£o\n\n"
                "‚úÖ **Status:** Operacional"
            )
            
            # Estat√≠sticas na sidebar
            with st.sidebar.expander("üìà Estat√≠sticas"):
                st.markdown("""
                **Temas dispon√≠veis:** 1  
                **Subtemas:** 6  
                **T√≥picos espec√≠ficos:** 8  
                **Contextos detalhados:** 8  
                **Formato:** Quest√µes discursivas apenas
                **Quest√µes por gera√ß√£o:** 1-5 (configur√°vel)
                
                **√öltima atualiza√ß√£o:** Dezembro 2024
                """)
                    
            # √Årea principal com informa√ß√µes quando nenhuma quest√£o foi gerada
            if not gerar_button:
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown("""
                    ### üéØ Como usar este sistema:
                    
                    1. **üìö Selecione o tema** na barra lateral
                    2. **üìñ Escolha o subtema** relacionado
                    3. **üìù Escolha o t√≥pico espec√≠fico** (quando dispon√≠vel)
                    4. **‚öôÔ∏è Configure** o n√∫mero de quest√µes e dificuldade
                    5. **üöÄ Clique em "Gerar Quest√µes"** para criar as quest√µes
                    
                    ### üî¨ Todos os T√≥picos com contexto especializado:
                    - ‚úÖ **Tema 1:** 8 t√≥picos com contexto completo
                    - üìÅ **Fonte:** Arquivos .txt com quest√µes dos vestibulares de 2013 a 2025
                    
                    ### üìä Recursos do sistema:
                    - ‚úÖ Quest√µes contextualizadas no estilo UERJ
                    - ‚úÖ Gabaritos com solu√ß√µes detalhadas passo a passo
                    - ‚úÖ M√∫ltiplos n√≠veis de dificuldade
                    - ‚úÖ Baseado em quest√µes reais de vestibulares
                    - ‚úÖ Interface intuitiva e responsiva
                    - ‚úÖ Sistema de feedback integrado
                    """)
                
                with col2:
                    st.markdown("""
                    ### üìà Vis√£o Geral dos Conte√∫dos:
                    
                    **üß¨ Tema 1 - Os seres vivos e sua rela√ß√£o com o ambiente:**
                    - 6 subtemas principais
                    - 8 t√≥picos espec√≠ficos
                    - Foco em biodiversidade, ecologia, c√©lula, gen√©tica, parasitoses e fisiologia
                                
                    ### üîß Tecnologia:
                    - ü§ñ Claude Sonnet 4 (Anthropic)
                    - üêç Python + Streamlit
                    - üìä Interface responsiva
                    - üîí API keys protegidas
                    """)
            
            # Informa√ß√µes adicionais
            st.sidebar.markdown("---")
            st.sidebar.markdown("### ‚ÑπÔ∏è Informa√ß√µes")
            st.sidebar.info(
                "Este gerador utiliza intelig√™ncia artificial para criar quest√µes "
                "baseadas no padr√£o e contexto das provas da UERJ. "
                "As quest√µes s√£o geradas com base nos t√≥picos selecionados."
            )
        
        with tab2:
            exibir_graficos()
            return  # Importante: return aqui para n√£o executar o resto da fun√ß√£o

    def exibir_graficos():
        """Exibe p√°gina com gr√°ficos interativos de an√°lise das quest√µes UERJ"""
        st.title("üìä An√°lise Estat√≠stica - Quest√µes de Biologia UERJ")
        st.markdown("*Visualiza√ß√£o interativa da evolu√ß√£o dos temas ao longo dos anos (2013-2025)*")
        
        # Carregar dados CSV no Python
        try:
            df = pd.read_csv('bio_graficos.csv')
            st.success("‚úÖ Arquivo de dados carregado com sucesso!")
            
            # Converter dados para JSON para passar ao JavaScript
            dados_json = df.to_json(orient='records')
            
            # Embed do gr√°fico HTML com dados embutidos
            components.html(f"""
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>An√°lise de Quest√µes de Biologia UERJ</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 20px;
                background-color: #f5f5f5;
            }}
            .container {{
                max-width: 1200px;
                margin: 0 auto;
                background-color: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }}
            .title {{
                text-align: center;
                color: #2c3e50;
                margin-bottom: 30px;
            }}
            .controls {{
                margin-bottom: 20px;
                padding: 20px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
            }}
            .control-group {{
                margin-bottom: 15px;
            }}
            label {{
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #495057;
            }}
            select {{
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                font-size: 14px;
                background-color: white;
            }}
            .chart-container {{
                width: 100%;
                height: 600px;
                margin-top: 20px;
            }}
            .info-box {{
                background-color: #e3f2fd;
                border-left: 4px solid #2196f3;
                padding: 15px;
                margin-bottom: 20px;
                border-radius: 4px;
            }}
            .filter-options {{
                display: flex;
                gap: 15px;
                flex-wrap: wrap;
            }}
            .filter-options > div {{
                flex: 1;
                min-width: 200px;
            }}
            .metrics {{
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
                flex-wrap: wrap;
            }}
            .metric-card {{
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #dee2e6;
                flex: 1;
                min-width: 150px;
                text-align: center;
            }}
            .metric-value {{
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
            }}
            .metric-label {{
                font-size: 12px;
                color: #6c757d;
                margin-top: 5px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="title">An√°lise de Quest√µes de Biologia - UERJ (2013-2025)</h1>
            
            <div class="info-box">
                <strong>Como usar:</strong> Selecione um tema, subtema ou t√≥pico espec√≠fico para visualizar sua evolu√ß√£o ao longo dos anos. 
                Passe o mouse sobre os pontos do gr√°fico para ver informa√ß√µes detalhadas.
            </div>

            <div class="controls">
                <div class="filter-options">
                    <div class="control-group">
                        <label for="tipoSelect">Tipo:</label>
                        <select id="tipoSelect">
                            <option value="">Todos</option>
                            <option value="Tema">Tema</option>
                            <option value="Subtema">Subtema</option>
                            <option value="T√≥pico">T√≥pico</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label for="itemSelect">Item:</label>
                        <select id="itemSelect">
                            <option value="">Selecione um item</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="metrics" id="metricsContainer" style="display: none;">
                <div class="metric-card">
                    <div class="metric-value" id="totalQuestoes">0</div>
                    <div class="metric-label">Total de Quest√µes</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="participacaoTotal">0%</div>
                    <div class="metric-label">Participa√ß√£o Total</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="mediaAnual">0</div>
                    <div class="metric-label">M√©dia Anual</div>
                </div>
            </div>

            <div class="chart-container" id="chartContainer"></div>
        </div>

        <script>
            // Dados carregados do Python
            const data = {dados_json};
            let totalQuestoesPorAno = {{}};

            // Fun√ß√£o para processar dados
            function processData() {{
                try {{
                    // Calcular total de quest√µes por ano
                    const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                    anos.forEach(ano => {{
                        totalQuestoesPorAno[ano] = data.reduce((sum, row) => sum + (row[ano] || 0), 0);
                    }});

                    // ADI√á√ÉO: Calcular totais por tipo e ano para participa√ß√£o percentual correta
                    window.totaisPorTipoEAno = {{}};
                    anos.forEach(ano => {{
                        window.totaisPorTipoEAno[ano] = {{
                            'Tema': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'Tema')
                                    .reduce((sum, row) => sum + (row[ano] || 0), 0),
                            'Subtema': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'Subtema')
                                        .reduce((sum, row) => sum + (row[ano] || 0), 0),
                            'T√≥pico': data.filter(row => row['Tema/Subtema/T√≥pico'] === 'T√≥pico')
                                        .reduce((sum, row) => sum + (row[ano] || 0), 0)
                        }};
                    }});

                    populateFilters();
                    
                }} catch (error) {{
                    console.error('Erro ao processar dados:', error);
                    document.getElementById('chartContainer').innerHTML = '<p style="text-align: center; color: red;">Erro ao processar os dados.</p>';
                }}
            }}

            // Fun√ß√£o para popular os filtros
            function populateFilters() {{
                const tipoSelect = document.getElementById('tipoSelect');
                const itemSelect = document.getElementById('itemSelect');

                // Debug: verificar estrutura dos dados
                console.log('Dados carregados:', data);
                console.log('Primeira linha:', data[0]);

                // Limpar op√ß√µes anteriores
                itemSelect.innerHTML = '<option value="">Selecione um item</option>';

                // Listener para mudan√ßa de tipo
                tipoSelect.addEventListener('change', function() {{
                    const tipoSelecionado = this.value;
                    console.log('Tipo selecionado:', tipoSelecionado);
                    
                    itemSelect.innerHTML = '<option value="">Selecione um item</option>';

                    if (tipoSelecionado) {{
                        const itensFiltrados = data.filter(row => row['Tema/Subtema/T√≥pico'] === tipoSelecionado);
                        console.log('Itens filtrados:', itensFiltrados);
                        
                        itensFiltrados.forEach(item => {{
                            const option = document.createElement('option');
                            option.value = item['√çndice'];
                            option.textContent = item['T√≠tulo'];
                            itemSelect.appendChild(option);
                        }});
                    }} else {{
                        // Mostrar todos os itens
                        data.forEach(item => {{
                            const option = document.createElement('option');
                            option.value = item['√çndice'];
                            option.textContent = `[${{item['Tema/Subtema/T√≥pico']}}] ${{item['T√≠tulo']}}`;
                            itemSelect.appendChild(option);
                        }});
                    }}
                }});
        
                // Listener para mudan√ßa de item
                itemSelect.addEventListener('change', function() {{
                    const indiceSelecionado = this.value;
                    if (indiceSelecionado) {{
                        const itemSelecionado = data.find(row => row['√çndice'].toString() === indiceSelecionado);
                        if (itemSelecionado) {{
                            updateChart(itemSelecionado);
                            updateMetrics(itemSelecionado);
                        }}
                    }} else {{
                        document.getElementById('chartContainer').innerHTML = '';
                        document.getElementById('metricsContainer').style.display = 'none';
                    }}
                }});

                // Disparar evento para popular itens inicialmente
                tipoSelect.dispatchEvent(new Event('change'));
            }}

            // Fun√ß√£o para atualizar m√©tricas
            function updateMetrics(item) {{
                const metricsContainer = document.getElementById('metricsContainer');
                const totalQuestoes = document.getElementById('totalQuestoes');
                const participacaoTotal = document.getElementById('participacaoTotal');
                const mediaAnual = document.getElementById('mediaAnual');

                const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                const totalAnual = anos.reduce((sum, ano) => sum + (item[ano] || 0), 0);
                const media = totalAnual / anos.length;

                totalQuestoes.textContent = item['Contagem Total'] || 0;
                participacaoTotal.textContent = ((item['Participa√ß√£o Total'] || 0) * 100).toFixed(1) + '%';
                mediaAnual.textContent = media.toFixed(1);

                metricsContainer.style.display = 'flex';
            }}

            // Fun√ß√£o para atualizar o gr√°fico
            function updateChart(item) {{
                const anos = ['2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2024', '2025'];
                
                const questoesPorAno = anos.map(ano => item[ano] || 0);
                
                // ALTERA√á√ÉO: Calcular participa√ß√£o percentual baseada no tipo do item
                const participacaoAnual = anos.map(ano => {{
                    const questoes = item[ano] || 0;
                    const tipoItem = item['Tema/Subtema/T√≥pico'];
                    const totalDoTipo = window.totaisPorTipoEAno[ano][tipoItem] || 1;
                    return questoes === 0 ? 0 : (questoes / totalDoTipo * 100);
                }});

                // Criar texto para hover
                const hoverText = anos.map((ano, index) => {{
                    const tipoItem = item['Tema/Subtema/T√≥pico'];
                    const totalDoTipo = window.totaisPorTipoEAno[ano][tipoItem] || 0;
                    
                    return `<b>${{ano}}</b><br>` +
                        `Quest√µes: ${{questoesPorAno[index]}}<br>` +
                        `Participa√ß√£o: ${{participacaoAnual[index].toFixed(1)}}%<br>` +
                        `Total de ${{tipoItem.toLowerCase()}}s: ${{totalDoTipo}}<br>` +
                        `<b>Dados Gerais:</b><br>` +
                        `Total geral: ${{item['Contagem Total']}}<br>` +
                        `Participa√ß√£o total: ${{((item['Participa√ß√£o Total'] || 0) * 100).toFixed(1)}}%`;
                }});

                const trace = {{
                    x: anos,
                    y: participacaoAnual,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Participa√ß√£o % por Ano',
                    line: {{
                        color: '#2196f3',
                        width: 3
                    }},
                    marker: {{
                        size: 8,
                        color: '#1976d2',
                        line: {{
                            color: '#0d47a1',
                            width: 2
                        }}
                    }},
                    hovertemplate: '%{{text}}<extra></extra>',
                    text: hoverText
                }};

                const layout = {{
                    title: {{
                        text: `<b>${{item['T√≠tulo']}}</b><br><sub>[${{item['Tema/Subtema/T√≥pico']}}]</sub>`,
                        font: {{
                            size: 16
                        }}
                    }},
                    xaxis: {{
                        title: 'Ano',
                        showgrid: true,
                        gridcolor: '#e0e0e0'
                    }},
                    yaxis: {{
                        title: 'Participa√ß√£o (%)',
                        showgrid: true,
                        gridcolor: '#e0e0e0'
                    }},
                    plot_bgcolor: '#fafafa',
                    paper_bgcolor: 'white',
                    hovermode: 'x unified',
                    margin: {{
                        l: 60,
                        r: 40,
                        t: 80,
                        b: 60
                    }}
                }};

                const config = {{
                    responsive: true,
                    displayModeBar: true,
                    modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d', 'autoScale2d'],
                    displaylogo: false
                }};

                Plotly.newPlot('chartContainer', [trace], layout, config);
            }}

            // Inicializar aplica√ß√£o
            window.addEventListener('load', processData);
        </script>
    </body>
    </html>
            """, height=800, scrolling=True)
            
            # Se√ß√£o de download no final da p√°gina
            st.markdown("---")
            st.markdown("### üì• Download dos Dados")
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                try:
                    # Verificar se o arquivo Excel existe
                    if os.path.exists('bio_graficos.xlsx'):
                        with open('bio_graficos.xlsx', 'rb') as file:
                            excel_data = file.read()
                        
                        st.download_button(
                            label="üìä Baixar bio_graficos.xlsx",
                            data=excel_data,
                            file_name="bio_graficos_uerj_biologia.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            help="Baixar arquivo Excel com todos os dados estat√≠sticos",
                            use_container_width=True
                        )
                    else:
                        # Se n√£o existir arquivo Excel, criar a partir do CSV
                        df_excel = pd.read_csv('bio_graficos.csv')
                        buffer = BytesIO()
                        df_excel.to_excel(buffer, index=False, engine='openpyxl')
                        excel_data = buffer.getvalue()
                        
                        st.download_button(
                            label="üìä Baixar dados em Excel",
                            data=excel_data,
                            file_name="bio_graficos_uerj_biologia.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            help="Baixar arquivo Excel gerado a partir dos dados CSV",
                            use_container_width=True
                        )
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao preparar download: {str(e)}")
                    st.info("üìã Verifique se o arquivo est√° dispon√≠vel ou tente novamente.")
                
        except FileNotFoundError:
            st.error("‚ùå Arquivo 'bio_graficos.csv' n√£o encontrado!")
            st.info("üìÅ Certifique-se de que o arquivo 'bio_graficos.csv' est√° na mesma pasta do aplicativo.")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
            st.info("üìã Verifique o formato do arquivo CSV e tente novamente.")        

    if __name__ == "__main__":
        main()